/**
 * small client to test the minimum features (e.g. command-line) of new
 * Users module
 */

{

textdomain "users";

y2milestone ("----------------------------------------");
y2milestone ("Users module started");

import "Users";
import "Mode";

include "users/wizards.ycp";
include "commandline/commandline.ycp";

string  start_dialog	= "summary";

any	ret		= nil;
integer arg		= 0;
//TODO groups -> adapt current_summary list    possible_start_dialogs = ["user_add", "group_add", "groups", "users", "user_inst_start" ];
list    possible_start_dialogs = ["user_add", "group_add", "summary", "user_inst_start" ];

while ( arg < size( WFM::Args() ) )
{
    any a = WFM::Args( arg );
    if ( is (a, string) && contains( possible_start_dialogs, a))
    {
	start_dialog = (string) WFM::Args( arg );
    }
    arg = arg + 1;
}

if (start_dialog != "summary")
{
    y2milestone( "Starting with %1 - test mode: %2", start_dialog, Mode::test );
    ret = UsersSequence(start_dialog);
    y2milestone("Users module finished with %1", ret);
    y2milestone("----------------------------------------");
    return ret;
}

// else parse arguments in cmdline
y2milestone( "Starting with arguments: %1", WFM::Args() );


// --------------------------------------------------------------------------
// --------------------------------- cmd-line handlers

/**
 * List users
 * @return boolean false
 */
global define boolean UsersListHandler (map options ) ``{


    y2internal ("---------------------------");
//    Users::ListUsers (options["sets"]:["local"]); TODO

    return false; // do not call Write...
}

/**
 * Show one user information
 * @return boolean false
 */
global define boolean UsersShowHandler (map options ) ``{

    map user = $[];
    integer uid = tointeger (options ["uidNumber"]:-1);
    string username = options ["username"]:"";

    if (uid != -1)
    {
	user = Users::GetUser (uid, "local");
    }
    else if (username != "")
    {
	user = Users::GetUserByName (username, "");
    }

    string out = "";
    foreach (string key, any value, user, ``{
	out = out + sformat ("%1:\t%2\n", key, value);
    });

    y2internal ("user:\n%1", out);
    CommandLine::Print (out);

    return false; // do not call Write...
}

/**
 * Add user
 * @return boolean false
 */
global define boolean UsersAddHandler (map <string, any> options ) ``{

    if (options["username"]:"" == "")
    {
	y2error ("You must specify username");
	return false;
    }

    map <string, any> user = options;
    string pw = user["password"]:"";
    /* TODO
    if (pw != "")
	user["password"] = Users::CryptPassword(pw, user["type"]:"local");
    */

    Users::AddUser (user);
    Users::CheckUser (user);
    return Users::CommitUser ();

}

/**
 * Delete user
 * @return boolean false
 */
global define boolean UsersDeleteHandler (map  <string, any>options ) ``{

    if (options["username"]:"" == "")
    {
	y2error ("You must specify username");
	return false;
    }
    boolean delete_home = false;

    Users::SelectUserByName (options["username"]:"");
    Users::DeleteUser (delete_home);
    Users::CommitUser ();
    return true;
}

global define boolean UsersRead () ``{

    return Users::Read ();
}

global define boolean UsersWrite () ``{

    return Users::Write () == "";
}

global define boolean UsersGUI ()``{
    return (UsersSequence (start_dialog) == `next);
}


/* the command line description map */
map cmdline = $[
    "id"		: "users",
    // translators: command line help text for Users module
    "help"		: _("Users configuration module."),
    "guihandler"	: UsersGUI,
    "initialize"	: UsersRead,
    "finish"		: UsersWrite,
    "actions"		: $[
	"list" :$[
	    "handler"	: UsersListHandler,
	    // translators: command line help text for list action
	    "help"	: _("List of available users")
	],
	"show" :$[
	    "handler"	: UsersShowHandler,
	    // translators: command line help text for show action
	    "help"	: _("Show information of selected user")
	],
	"add" :$[
	    "handler"	: UsersAddHandler,
	    // translators: command line help text for ad action
	    "help"	: _("Add new user")
	],
	"delete" :$[
	    "handler"	: UsersDeleteHandler,
	    // translators: command line help text for delete action
	    "help"	: _("Delete an existing user. (Home directory is not removed.)" )
	],
    ],
    "options"		: $[
	"local"	:$[
	    // translators: command line help text for list local option
	    "help"	: _("List of local users"),
	],
	"system"	:$[
	    // translators: command line help text for list system option
	    "help"	: _("List of system users"),
	],
	"ldap"		:$[
	    // translators: command line help text for list ldap option
	    "help"	: _("List of LDAP users"),
	],
	"nis"		:$[
	    // translators: command line help text for list nis option
	    "help"	: _("List of NIS users"),
	],

	"uid"		:$[
	    // translators: command line help text for show uid option
	    "help"	: _("UID of selected user"),
	    "type"	: "string"
	],
	"username"	:$[
	    // translators: command line help text for show username/add option
	    "help"	: _("Name of selected user"),
	    "type"	: "string"
	],
	"cn"		:$[
	    // translators: command line help text for add option
	    "help"	: _("Full name of new user"),
	    "type"	: "string"
	],
	"password"		:$[
	    // translators: command line help text for add option
	    "help"	: _("Password of new user"),
	    "type"	: "string"
	],
    ],
    "mappings"		: $[
	"list"	: [ "local", "system", "ldap", "nis" ],// + "custom"
	"show"  : [ "uid", "username"],
	"add"	: [ "username", "cn", "password" ],
	"delete": [ "username" ]
    ]
];

ret = CommandLineRun( cmdline );

/* Finish */
y2milestone("Users module finished with %1", ret);
y2milestone("----------------------------------------");
return ret;

} //EOF
