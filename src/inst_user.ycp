/**
 * Module:      inst_user.ycp
 *
 * Authors:     Klaus Kaempf <kkaempf@suse.de>
 *              Stefan Hundhammer <sh@suse.de>
 *
 * Purpose:     Start user management module from within installation workflow
 *
 * $Id$
 */
{

    textdomain "users";

    import "GetInstArgs";
    import "Package";
    import "Label";
    import "Ldap";
    import "Users";
    import "UsersCache";
    import "Wizard";

    include "users/wizards.ycp";

    any ret	= `back;

    // hide the inst_auth content
    Wizard::SetContents ("", `Empty (), "",
	GetInstArgs::enable_back(), GetInstArgs::enable_next()
    );

    // what to call after inst_auth dialog
    string client	= Users::AfterAuth();
    if (client != "users")
    {
	// going back from next step, while kerberos was already configured
	if (Users::KerberosConfiguration () && GetInstArgs::going_back () &&
	    Package::Installed ("yast2-kerberos-client"))
	{
	    ret = (symbol) WFM::CallFunction ("kerberos-client", WFM::Args ());
	    if (ret == `next)
		return ret;
	}

        string package = sformat("yast2-%1-client", client);
	// name of client to call
        map call_client = $[
	    "samba": "samba-client",
	    "edir_ldap" : "linux-user-mgmt",
	];
	if (client == "edir_ldap")
	    package = "yast2-linux-user-mgmt";
	if (!Package::InstallAllMsg ([package],
            // popup label (%1 is package to install)
            sformat (_("Package %1 is not installed.
Install it now?
"), package)))
        {
	    return `back;
	}

	// when we go `back from kerberos, call previous client again
	boolean again	= true;
	while (again)
	{
	    again	= false;
            ret = (symbol) WFM::CallFunction (call_client [client]:client,
		WFM::Args ());

	    // after nis/ldap/edit client was called, maybe call also kerberos
	    if (ret == `next && Users::KerberosConfiguration () &&
		Package::InstallAllMsg (["yast2-kerberos-client"],
		// popup label (%1 is package to install)
		sformat (_("Package %1 is not installed.
Install it now?
"), "yast2-kerberos-client")))
	    {
		ret = (symbol) WFM::CallFunction ("kerberos-client",
		    WFM::Args ());
		if (ret == `back)
		    again	= true;
	    }
	}

	if (ret == `next && client == "ldap" && Ldap::initial_defaults_used)
	{
	    // continue with users...
	    Users::SetAfterAuth ("users");
	    y2milestone("calling users module to enable creating LDAP user...");
	}
	else
	{
	    // ldap not used, or the client configuration is different than
	    // proposal from ldap server
	    return (symbol) ret;
	}
    }
    list import_u	= Users::GetUsersForImport ();
    if (size (import_u) > 0)
    {
	if (GetInstArgs::going_back())
	{
	    Users::SetUsersForImport ([]);
	    return `back;
	}
	ReadDialog (false); // clear the cache from imported data
	y2milestone ("There are some users to import");
	foreach (map<string,any> user, (list<map<string,any> >) import_u, {
	    user["encrypted"]	= true;
	    string error = Users::AddUser (user);
	    if (error != "")
	    {
		y2error ("error while adding user: %1", error);
	    }
	    error = Users::CheckUser ($[]);
	    if (error != "")
	    {
		y2error ("error while adding user: %1", error);
	    }
	    Users::CommitUser ();
	});
	Users::Write ();
	ret = `auto;
    }
    else
    {
	// else run the users module
	y2milestone ("Starting user management module with parameters %1",
	    GetInstArgs::argmap());

	UsersCache::SetCurrentSummary ("users");
	Users::SetStartDialog ("user_inst_start");
	ret = UsersSequence ("user_inst_start");

	y2milestone ("User management module returned %1", ret );
    }

    if ( ret == nil )
    {
        y2warning( "UsersSequence returns null!" );
        ret = `auto;
    }
    return (symbol) ret;
}
