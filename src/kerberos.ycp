/**
 * File:    include/kerberos/kerberos.ycp
 * Module:  Kerberos client configuration
 * Summary: Main file - the client
 * Authors: Jiri Suchomel <jsuchome@suse.cz>
 */

{

textdomain "kerberos";

import "Wizard";
import "Kerberos";

/**
 * The only dialog
 * @return  `back or `next
 */
global define symbol KerberosDialog () ``{

    // help text
    string help_text = "";

    boolean use_pam_krb = Kerberos::use_pam_krb;
    string default_realm = Kerberos::default_realm;
    string kdc = Kerberos::kdc;
    string control = Kerberos::control;
//    string arguments = Kerberos::argumets;

    list controls = [
        `item (`id ("required"), "required", false),
        `item (`id ("optional"), "optional", false),
        `item (`id ("sufficient"), "sufficient", false)
    ];

    term con = `HVSquash(
        `VBox (
        `VSpacing(1),
        // frame label
        `Frame (_("PAM login"),
            `VBox (
                `VSpacing (0.5),
                `RadioButtonGroup(`id(`rd),
                    `Left(`HVSquash(`VBox (
                        // radio button label
                        `Left (`RadioButton(`id(`pamno), `opt (`notify), _("Do &not use Kerberos"), !use_pam_krb)),
                        // radio button label
                        `Left(`RadioButton(`id(`pamyes), `opt (`notify), _("&Use Kerberos"), use_pam_krb)))))),
                // text entry label
                `ComboBox (`id (`auth_control), `opt(`hstretch),
                    _("Kerberos &authentification is"), controls),
                `VSpacing (0.5))
        ),
        `VSpacing(1),
        // frame label
        `Frame (_("Kerberos client settings"),
            `VBox (
                `VSpacing (0.5),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`realm), _("Default &realm"),
                         default_realm)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`kdc), _("&KDC server adress"), kdc)),
                `VSpacing (0.5)
            )
        ),
        `VSpacing(1)
    ));


    Wizard::SetContentsButtons (
        // dialog title
        _("Kerberos Client Configuration"), con, help_text,
        UI::BackButtonLabel (), UI::FinishButtonLabel ());

    UI::ChangeWidget (`id (`auth_control), `Enabled, use_pam_krb);

    if (control != "")
        UI::ChangeWidget (`id(`auth_control), `Value, control);

    any result = nil;
    do {
        result = UI::UserInput ();

        if (result == `pamyes || result == `pamno) {
            use_pam_krb = (result == `pamyes);
            UI::ChangeWidget (`id (`auth_control), `Enabled, use_pam_krb);
        }

        default_realm = UI::QueryWidget(`id(`realm), `Value);
        kdc = UI::QueryWidget(`id(`kdc), `Value);

        if (result == `next && use_pam_krb) {

            if (default_realm == "")
            {
               // error popup label
               Report::Error(_("Enter the default realm name."));
               result = nil;
               continue;
            }

           if (kdc == "")
            {
                // error popup label
                Report::Error(_("Enter the address of KDC server."));
                result = nil;
                continue;
            }
        }

    } while (result != `back && result != `next && result != `cancel);

    if (result == `next)
    {
        Kerberos::use_pam_krb = use_pam_krb;
        Kerberos::default_realm = default_realm;
        Kerberos::kdc = kdc;
    }

    return result;
}


    // -- main

    Wizard::CreateDialog ();
    Wizard::ReplaceAbortButton(`Empty ());

    Kerberos::Read ();

    symbol result = KerberosDialog ();

    if (result == `next)
    {
        if (Kerberos::Write (false))
            UI::MessagePopup(_("The configuration of the Kerberos client
was saved and can be used."));
    }

    return UI::CloseDialog();
}
