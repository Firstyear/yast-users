/**
 * File:
 *  groups.ycp
 * Module:
 *  Configuration of the users and groups stettings
 *
 * Summary:
 *  Main file.
 *
 * Authors:
 *	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Just a shortcut to invoke groups management
 */

{

textdomain "users";

y2milestone ("----------------------------------------");
y2milestone ("Users module started");

import "Users";
import "UsersCache";
import "CommandLine";

include "users/wizards.ycp";

string  start_dialog	= "summary";
any	ret		= nil;
integer arg		= 0;
list    possible_start_dialogs = ["group_add", "summary", "users", "groups" ];
// do not pass arguments to cmd-line interpreter
boolean no_cmdline	= false;

while ( arg < size( WFM::Args() ) )
{
    any a = WFM::Args( arg );
    if ( is (a, string) && contains( possible_start_dialogs, a))
    {
	start_dialog = (string) WFM::Args( arg );
	no_cmdline		= true;
    }
    arg = arg + 1;
}

// default for this client
UsersCache::SetCurrentSummary ("groups");

if (start_dialog == "users" || start_dialog == "groups")
{
    UsersCache::SetCurrentSummary (start_dialog);
    start_dialog	= "summary";
}

if (no_cmdline)
{
    y2milestone( "Starting with %1 - test mode: %2", start_dialog, Mode::test );
    Users::SetStartDialog (start_dialog);
    ret = UsersSequence (start_dialog);
    y2milestone("Users module finished with %1", ret);
    y2milestone("----------------------------------------");
    return ret;
}

// else parse arguments in cmdline
y2milestone( "Starting with arguments: %1", WFM::Args() );


// --------------------------------------------------------------------------
// --------------------------------- cmd-line handlers

/**
 * List groups
 * @return boolean false
 */
define boolean GroupsListHandler (map<string,string> options ) ``{

    list<string> sets = maplist (string type, string val, options, ``(type));
    if (sets == [])
	sets = ["local"];

    foreach (string type, sets, ``{
	if (type == "nis" && Users::NISAvailable () && Users::NISNotRead ())
	{
	    Users::ReadNewSet ("nis");
	}
	foreach (string groupname, UsersCache::GetGroupnames (type), ``{
	    CommandLine::Print (groupname);
	});
    });
    return false; // do not call Write...
}

/**
 * Show one group information
 * @return boolean false
 */
define boolean GroupsShowHandler (map options ) ``{

    map<string,any> group = $[];
    integer gid = tointeger (options ["gidNumber"]:options["gid"]:"-1");
    string groupname = options ["groupname"]:"";

    if (gid != -1)
    {
	group = Users::GetGroup (gid, "");
    }
    else if (groupname != "")
    {
	group = Users::GetGroupByName (groupname, "");
    }
    if (group == $[])
    {
	// error message
	CommandLine::Print (_("There is no such group."));
	return false;
    }

    string out = "";
    map keys = $[
	// label shown at command line (user attribute)
	"cn"		: _("Group Name:"),
	// label shown at command line (user attribute)
	"gidNumber"	: _("GID:"),
	// label shown at command line (user attribute)
	"userlist"	: _("List of Members:"),
    ];
    foreach (string key, any value, group, ``{
	key = keys[key]:"";
	if (key == "") return;
	string svalue = sformat ("%1", value);
	if (is (value, map))
	{
	    svalue = mergestring ((list<string>)
		maplist (string k, any v, (map<string,any>) value, ``(k)), ",");
	}
	CommandLine::Print (sformat ("%1\n\t%2", key, svalue));
    });

    return false; // do not call Write...
}


define boolean UsersRead () ``{

    Users::SetGUI (false);
    return Users::Read ();
}

define boolean UsersWrite () ``{

    Users::SetGUI (false);
    return Users::Write ();
}

define boolean UsersGUI ()``{
    return (UsersSequence (start_dialog) == `next);
}


/* the command line description map */
map cmdline = $[
    "id"		: "groups",
    // translators: command line help text for Users module
    "help"		: _("Group configuration module."),
    "guihandler"	: UsersGUI,
    "initialize"	: UsersRead,
    "finish"		: UsersWrite,
    "actions"		: $[
	"list" :$[
	    "handler"	: GroupsListHandler,
	    // translators: command line help text for list action
	    "help"	: _("List of available groups")
	],
	"show" :$[
	    "handler"	: GroupsShowHandler,
	    // translators: command line help text for show action
	    "help"	: _("Show information of selected group")
	],
    ],
    "options"		: $[
	"local"	:$[
	    // translators: command line help text for list local option
	    "help"	: _("List of local groups"),
	],
	"system"	:$[
	    // translators: command line help text for list system option
	    "help"	: _("List of system groups"),
	],
	"ldap"		:$[
	    // translators: command line help text for list ldap option
	    "help"	: _("List of LDAP groups"),
	],
	"nis"		:$[
	    // translators: command line help text for list nis option
	    "help"	: _("List of NIS groups"),
	],
	"gid"		:$[
	    // translators: command line help text for show uid option
	    "help"	: _("GID of the group"),
	    "type"	: "string"
	],
	"groupname"	:$[
	    // translators: command line help text for groupname option
	    "help"	: _("Name of the group"),
	    "type"	: "string"
	],
    ],
    "mappings"		: $[
	"list"	: [ "local", "system", "ldap", "nis" ],// + "custom"
	"show"  : [ "gid", "groupname"],
    ]
];

ret = CommandLine::Run (cmdline);

y2milestone("Users module finished with %1", ret);
y2milestone("----------------------------------------");
return ret;

} // End
