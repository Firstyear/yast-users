/**
 * File:	include/users/complex.ycp
 * Package:	Configuration of users and groups
 * Summary:	Dialogs definitions
 * Authors:	Johannes Buchhold <jbuch@suse.de>,
 *		Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "users";

import "Wizard";
import "Mode";
import "Report";
import "Security";
import "Autologin";

import "Users";
import "UsersCache";

import "Popup";
import "Label";

include "users/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
define boolean Modified() ``{
    return Users::Modified () || Autologin::modified;
}


/**
 * Read settings dialog
 * @param useUI boolean use user interface (change progress bar)
 * @return symbol `next if success, else `abort
 */
define symbol ReadDialog (boolean useUI ) ``{

    // Set help text
    if ( useUI ) Wizard::RestoreHelp ( ReadDialogHelp () );

    // A callback function for abort
    block<boolean> abort = ``{
        return UI::PollInput () == `abort;
    };

    /*
    symbol ret = Users::Read (abort, useUI);
    return ret; FIXME
    */
    symbol ret = Users::Read () ? `next : `back;
    return ret;
}

/**
 * Write settings dialog
 * @param useUI boolean use user interface (change progress bar)
 * @return symbol `next if success, else `abort
 */
define symbol WriteDialog (boolean useUI ) ``{

    // Set help text
    if ( useUI ) Wizard::RestoreHelp ( WriteDialogHelp () );

    // A callback function for abort
    block<boolean> abort = ``{
        // popup text
        if (UI::PollInput () == `abort && Popup::YesNo (_("Really abort the writing process?")))
            return true;
        return false;
    };
//    return Users::Write(abort, useUI);
    return Users::Write () == "" ? `next : `abort;
}

/**
 * Set the module to normal setup mode
 * @return symbol for wizard sequencer
 */
define symbol userSetup () ``{
    Users::SetStartDialog ("users") ;
    return `next;
}

/**
 * Set the module into installation mode with
 * first dialog for single user addition
 * @return symbol for wizard sequencer
 */
define symbol usersInstStart () ``{
    Users::SetStartDialog ("user_add") ;
    Users::AddUser ($[]);
    return `next;
}


/**
 * The dialog that appears when the [Abort] button is pressed.
 * @return `abort if user really wants to abort
 */
define symbol ReallyAbort() ``{

    boolean ret = true;

    if ( ! Mode::cont )
    {
        ret = Popup::ReallyAbort (Modified());
    }
    else
    {
        ret = Popup::ConfirmAbort (`incomplete);
    }

    if( ret )
    {
        return `abort;
    }
    else return `back;
}


/* EOF */
}
