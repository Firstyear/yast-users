/**
 * File:	include/users/nis_routines.ycp
 * Package:	Configuration of users and groups
 * Summary:	NIS server test and read routines
 * Authors:	Johannes Buchhold <jbuch@suse.de>
 *
 */

{
/*
 * Reads the prepared map of NIS users
 */
global define map ReadNISUsers(string dir)``{

    return SCR::Read(.target.ycp, dir + "/nis.ycp");
}

global define map ReadNISUsersByName(string dir)``{

    return SCR::Read(.target.ycp, dir + "/nis_byname.ycp");
}

/**
  * Check whether host is NIS master
  * @return boolean true if is master
  */
global define boolean IsNISMaster () ``{
    boolean helper = 0 == SCR::Execute (.target.bash, "test -f /usr/lib/yp/yphelper");
    if (! helper)
        return false;
    boolean master = 0 == SCR::Execute (.target.bash, "/usr/lib/yp/yphelper --domainname `domainname` --is-master passwd.byname > /dev/null 2>&1");
    return master;
}

/**
  * Checks if set of NIS users is available
  */
global define boolean IsNISAvailable (list passwd_source) ``{

    if (contains (passwd_source, "nis") ||
        contains (passwd_source, "compat"))
    {
        // check if it is true
        if (0 == SCR::Execute (.target.bash, "/usr/bin/ypwhich"))
            return true;
    }
    return false;
}

/**
 * If we can ask and are a NIS server, ask which set of users
 * to administer and set UserWriteStack accordingly.
 * @param interactive true if can ask user via popup
 * @return success?
 */
global define boolean ReadNISConfigurationType (string basedir)``{

    string ypdir = SCR::Read(.sysconfig.ypserv.YPPWD_SRCDIR);
    while (substring (ypdir, size (ypdir) - 1) == "/")
        ypdir = substring (ypdir, 0, size (ypdir) -1);
    if ("" == ypdir)
        ypdir = "/";
    if (ypdir != basedir)
    {
        symbol type = getConfigurationType (ypdir);
        if (type == `abort)
        {
            return nil;
        }
        if (type == `nis)
        {
            // this should never happen, probably only in testsuites
            if (ypdir == nil)
                ypdir = basedir;
        }
        else
            ypdir = basedir;
    }
    return ypdir;
}

/**
  * Ask user for configuration type (standard or NIS)
  * @param dir string directory with NIS settings
  * @return symbol `passwd or `nis or `abort
  */
global define symbol getConfigurationType (string dir) ``{
    term contents = `VBox (
        // label
        `Label (_("You have installed an NIS master server.
It is configured to use a different database
of users and groups than the local system 
database in the /etc directory.
Select which one to configure.
")),
        `VSpacing (1),
        `RadioButtonGroup (`id (`configtype), `VBox (
        // radio button
        `RadioButton (`id (`passwd), `opt (`hstretch), _("&Local (/etc directory)"), true),
        `VSpacing (1),
        // radio button, %1 is path (eg. /etc)
        `RadioButton (`id (`nis), `opt (`hstretch), sformat(_("&NIS (%1 directory)"), dir), false)
        )),
        `VSpacing (1),
        `HBox (
        `HStretch (),
        `PushButton (`id (`ok), UI::OKButtonLabel()),
        `HStretch (),
        `PushButton (`id (`abort), UI::AbortButtonLabel()),
        `HStretch ()
        )
    );
    UI::OpenDialog (contents);
    symbol ret = nil;
    while (ret == nil)
    {
        ret = UI::UserInput ();
        if (ret != `cancel && ret != `ok)
            continue;
    }
    if (ret == `ok)
        ret = UI::QueryWidget (`id (`configtype), `CurrentButton);
    UI::CloseDialog ();
    return ret;
}

}
