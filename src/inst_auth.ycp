/**
 * File:	installation/general/inst_auth.ycp
 * Package:	Users configuration
 * Summary:	Ask for user authentication method
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{

    textdomain "users";

    import "Wizard";


    // caption for dialog "User Authentication Method"
    string caption = _("User Authentication Method");

    // help text for dialog "User Authentication Method" 1/3
    string help = _("<p>
<b>Authentication</b><br>
Here you can choose the authentication method of users on your system.
</p>") +

    // helptext 2/3
    _("<p>Select <b>Stand alone machine</b> if you want to authenticate users only by using local files <i>/etc/passwd</i> and <i>/etc/shadow</i>.</p>") +

    // helptext 3/3
    _("<p>If you are using NIS, NIS+ or LDAP server to store user data, select <b>Network  client</b> and choose the appropriate value. Then continue with configuration of your client after pressing <b>Next</b></p>");


    term net_buttons =
	`RadioButtonGroup (`VBox (
				  `VSpacing(0.5),
				  `Left(`RadioButton(`id(`nis), `opt(`disabled),
						     // radiobutton to select nis user auth.
						     _("N&IS"), true)),
				  `Left(`RadioButton(`id(`nisplus), `opt(`disabled),
						     // radiobutton to select nis+ user auth.
						     _("NI&S+"), false)),
				  `Left(`RadioButton(`id(`ldap), `opt(`disabled),
						     // radiobutton to select ldap user auth.
						     _("&LDAP"), false)),
				  `VSpacing(0.5)
				  )
			   );


    term buttons =
	`RadioButtonGroup (`VBox (
				  `Left(`RadioButton(`id(`local), `opt(`notify),
						     // radiobutton to select local user auth.
						     _("S&tand alone machine"), true)),
				  `Left(`RadioButton(`id(`network), `opt(`notify),
						     // radiobutton to select network user auth.
						     _("N&etwork client"), false)),
				  `VSpacing(0.5),
				  `HBox (
					 `HSpacing (4),
					 // frame title for network authentication methods
					 `Frame (_("Network Authentication Method"),
						 net_buttons
						 )
					 )
				  )
			   );

    term contents = `VBox (
			   `VStretch(),
			   `HBox (
				  `HStretch(),
				  buttons,
				  `HStretch()
				  ),
			   `VStretch()
			   );

    Wizard::SetContentsButtons (caption, contents, help,
				BackButtonLabel(), NextButtonLabel());

    any ret = nil;

    repeat {

	ret = Wizard::UserInput();

	if (ret == `abort)
	{
	    if ( WFM::CallFunction (`inst_confirm_abort(`incomplete) ) )
	    {
		Wizard::RestoreNextButton();
		break;
	    }
	}
	else if (ret == `local)
	{
	    UI::ChangeWidget (`id(`nis), `Enabled, false);
	    UI::ChangeWidget (`id(`nisplus), `Enabled, false);
	    UI::ChangeWidget (`id(`ldap), `Enabled, false);
	}
	else if (ret == `network)
	{
	    UI::ChangeWidget (`id(`nis), `Enabled, true);
	    UI::ChangeWidget (`id(`nisplus), `Enabled, true);
	    UI::ChangeWidget (`id(`ldap), `Enabled, true);
	}
	else if ( ret == `help )
	{
	    Wizard::ShowHelp (help);
	}

    } until ( ret == `next || ret == `back );

    return ret;

/* EOF */
}
