/**
 * File:	installation/general/inst_auth.ycp
 * Package:	Users configuration
 * Summary:	Ask for user authentication method
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{

    textdomain "users";

    import "Wizard";
    import "Users";
    import "Lan";
    import "Internet";

    include "require.ycp";

    list lan_devices = Lan::GetDevices("all");
    y2debug ("lan devices: %1", lan_devices);

    // check if lan is configured
    if (size (lan_devices) == 0)
    {
	    Users::after_auth = `users;
	    return `auto;
    }
    Internet::Fastest();
    if (issubstring (Internet::device, "dsl"))
    {
        y2milestone ("only DSL is present...");
	    Users::after_auth = `users;
	    return `auto;
    }

    // caption for dialog "User Authentication Method"
    string caption = _("User Authentication Method");

    // help text for dialog "User Authentication Method" 1/3
    string help = _("<p>
<b>Authentication</b><br>
Here you can choose the authentication method of users on your system.
</p>") +

    // helptext 2/3
    _("<p>Select <b>Stand-Alone Machine</b> if you want to authenticate users only by using the local files <i>/etc/passwd</i> and <i>/etc/shadow</i>.</p>") +

    // helptext 3/3
    _("<p>If you are using NIS, NIS+, or LDAP server to store user data, select <b>Network  Client</b> and choose the appropriate value. Then continue with configuration of your client after pressing <b>Next</b></p>");

    map button_labels = $[
        // radiobutton to select nis user auth.
        `nis:       _("N&IS"),
        // radiobutton to select nis+ user auth.
        `nisplus:	_("NI&S+"),
        // radiobutton to select ldap user auth.
		`ldap:      _("&LDAP")
    ];

    // check if nis+/ldap are available (there are not in personal edition)
    list available_clients = [`nis];

    if (IsPackageAvailable("yast2-ldap-client"))
        available_clients = add (available_clients, `ldap);
    if (IsPackageAvailable("yast2-nisplus-client"))
        available_clients = add (available_clients, `nisplus);

    term net_buttons = `VBox (`VSpacing(0.5));

    foreach (`client, available_clients, ``{
        net_buttons = add (net_buttons,
			`Left(`RadioButton(`id(client), button_labels[client]:"")));
    });
    net_buttons = add (net_buttons, `VSpacing(0.5));

    term buttons =
	`RadioButtonGroup (`VBox (
				  `Left(`RadioButton(`id(`local), `opt(`notify),
						     // radiobutton to select local user auth.
						     _("S&tand-Alone Machine"))),
				  `Left(`RadioButton(`id(`network), `opt(`notify),
						     // radiobutton to select network user auth.
						     _("N&etwork Client"))),
				  `VSpacing(0.5),
				  `HBox (
					 `HSpacing (4),
					 // frame title for network authentication methods
					 `Frame (_("Network Authentication Method"),
                         `RadioButtonGroup( net_buttons )
					    )
					 )
				  )
			   );

    term contents = `VBox (
			   `VStretch(),
			   `HBox (
				  `HStretch(),
				  buttons,
				  `HStretch()
				  ),
			   `VStretch()
			   );

    Wizard::SetContents (caption, contents, help, Args(0), Args(1));

    // select and enable to correct buttons
    if (Users::after_auth == `users)
    {
	    UI::ChangeWidget (`id(`local), `Value, true);
	    UI::ChangeWidget (`id(`network), `Value, false);
	    UI::ChangeWidget (`id(`nis), `Value, true);

        foreach (`client, available_clients, ``{
            UI::ChangeWidget (`id(client), `Enabled, false);
        });
    }
    else
    {
	    UI::ChangeWidget (`id(`local), `Value, false);
	    UI::ChangeWidget (`id(`network), `Value, true);

        foreach (`client, available_clients, ``{
            UI::ChangeWidget (`id(client), `Value, Users::after_auth == client);
        });
    }

    any ret = nil;

    repeat {

	ret = Wizard::UserInput();

	if (ret == `abort)
	{
	    if ( WFM::CallFunction (`inst_confirm_abort(`incomplete) ) )
		break;
	}
	else if (ret == `local || ret == `network)
	{
	    boolean tmp = !UI::QueryWidget (`id(`local), `Value);
	    foreach (`client, available_clients, ``{
		UI::ChangeWidget (`id(client), `Enabled, tmp);
	    });
	}
	else if ( ret == `help )
	{
	    Wizard::ShowHelp (help);
	}

    } until ( ret == `next || ret == `back );

    if ( UI::QueryWidget( `id(`network), `Value ) )
    {
        if ( UI::QueryWidget( `id(`nis), `Value ) )
            Users::after_auth = `nis;
        if ( UI::QueryWidget( `id(`nisplus), `Value ) )
            Users::after_auth = `nisplus;
        if ( UI::QueryWidget( `id(`ldap), `Value ) )
            Users::after_auth = `ldap;
    }
    else
    {
	Users::after_auth = `users;
    }

    return ret;

/* EOF */
}
