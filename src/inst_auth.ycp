/**
 * File:	installation/general/inst_auth.ycp
 * Package:	Users configuration
 * Summary:	Ask for user authentication method
 * Authors:	Arvin Schnell <arvin@suse.de>
 *		Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "users";

import "Wizard";
import "Popup";
import "Require";
import "Users";
import "NetworkDevices";
import "Internet";
import "DSL";

// Check if lan is configured
list net_devices = NetworkDevices::List("");
y2debug("net_devices: %1", net_devices);

if(size(net_devices) == 0) {
    Users::SetAfterAuth ("users");
    return `auto;
}

boolean found = false;
maplist(string dev, net_devices, ``{
    if(!DSL::UsesDevice(dev))
	found = true;
});
y2debug("found=%1", found);

if(!found) {
    Users::SetAfterAuth ("users");
    return `auto;
}

// caption for dialog "User Authentication Method"
string caption = _("User Authentication Method");

// help text for dialog "User Authentication Method" 1/3
string help = _("<p>
<b>Authentication</b><br>
Here you can choose the authentication method of users on your system.
</p>") +

// helptext 2/3
_("<p>Select <b>Stand-Alone Machine</b> if you want to authenticate users only by using the local files <i>/etc/passwd</i> and <i>/etc/shadow</i>.</p>") +

// helptext 3/3
_("<p>If you are using NIS or LDAP server to store user data, select <b>Network  Client</b> and choose the appropriate value. Then continue with configuration of your client after pressing <b>Next</b></p>");

map button_labels = $[
    // radiobutton to select nis user auth.
    "nis":       _("N&IS"),
    // radiobutton to select ldap user auth.
    "ldap":      _("&LDAP")
];

// check if nis+/ldap are available (there are not in personal edition)
list available_clients = ["nis"];

if (Require::IsPackageAvailable("yast2-ldap-client"))
    available_clients = add (available_clients, "ldap");

term net_buttons = `VBox (`VSpacing(0.5));

foreach (string client, available_clients, ``{
    net_buttons = add (net_buttons,
	`Left(`RadioButton(`id(client), button_labels[client]:"")));
});

net_buttons = add (net_buttons, `VSpacing(0.5));

term buttons = `RadioButtonGroup (`VBox (
		`Left(`RadioButton(`id(`local), `opt(`notify),
			// radiobutton to select local user auth.
			_("S&tand-Alone Machine"))),
		`Left(`RadioButton(`id(`network), `opt(`notify),
			// radiobutton to select network user auth.
			_("N&etwork Client"))),
		`VSpacing(0.5),
		`HBox (
		    `HSpacing (4),
		    // frame title for network authentication methods
		    `Frame (_("Network Authentication Method"),
			`RadioButtonGroup( net_buttons )
		    )
		))
);

term contents = `VBox (
		       `VStretch(),
		       `HBox (
			      `HStretch(),
			      buttons,
			      `HStretch()
			      ),
		       `VStretch()
		       );

Wizard::SetContents (caption, contents, help,
		    (boolean) WFM::Args(0), (boolean) WFM::Args(1));

// select and enable to correct buttons
if (Users::AfterAuth () == "users")
{
    UI::ChangeWidget (`id(`local), `Value, true);
    UI::ChangeWidget (`id(`network), `Value, false);
    UI::ChangeWidget (`id("nis"), `Value, true);

    foreach (string client, available_clients, ``{
	UI::ChangeWidget (`id(client), `Enabled, false);
    });
}
else
{
    UI::ChangeWidget (`id(`local), `Value, false);
    UI::ChangeWidget (`id(`network), `Value, true);

    foreach (string client, available_clients, ``{
	UI::ChangeWidget (`id(client), `Value, Users::AfterAuth () == client);
    });
}

any ret = nil;

repeat {

    ret = Wizard::UserInput();

    if (ret == `abort)
    {
	if ( Popup::ConfirmAbort (`incomplete) )
	    break;
    }
    else if (ret == `local || ret == `network)
    {
	boolean tmp = !(boolean)UI::QueryWidget (`id(`local), `Value);
	foreach (`client, available_clients, ``{
	    UI::ChangeWidget (`id(client), `Enabled, tmp);
	});
    }
    else if ( ret == `help )
    {
	Wizard::ShowHelp (help);
    }

} until ( ret == `next || ret == `back );

if ( (boolean) UI::QueryWidget( `id(`network), `Value ) )
{
    if ( (boolean) UI::QueryWidget( `id("nis"), `Value ) )
	Users::SetAfterAuth ("nis");
    if ( (boolean) UI::QueryWidget( `id("ldap"), `Value ) )
	Users::SetAfterAuth ("ldap");
}
else
{
    Users::SetAfterAuth ("users");
}

return (symbol) ret;

/* EOF */
}
