/**
 * File:	installation/general/inst_auth.ycp
 * Package:	Users configuration
 * Summary:	Ask for user authentication method
 * Authors:	Arvin Schnell <arvin@suse.de>
 *		Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "users";

import "Wizard";
import "Popup";
import "Require";
import "Users";
import "NetworkDevices";
import "DSL";
import "Ldap";

// Check if lan is configured
list<string> net_devices = NetworkDevices::List("");
y2debug("net_devices: %1", net_devices);

if (size(net_devices) == 0 && size (Ldap::initial_defaults) == 0) {
    Users::SetAfterAuth ("users");
    return `auto;
}

boolean found = false;
maplist(string dev, net_devices, ``{
    if(!DSL::UsesDevice(dev))
	found = true;
});
y2debug("found=%1", found);

if (!found && size (Ldap::initial_defaults) == 0) {
    Users::SetAfterAuth ("users");
    return `auto;
}

// caption for dialog "User Authentication Method"
string caption = _("User Authentication Method");

// help text for dialog "User Authentication Method" 1/3
string help = _("<p>
<b>Authentication</b><br>
Here you can choose the authentication method of users on your system.
</p>") +

// helptext 2/3
_("<p>Select <b>Local</b> if you want to authenticate users only by using the local files <i>/etc/passwd</i> and <i>/etc/shadow</i>.</p>") +

// helptext 3/3
_("<p>If you are using a NIS or LDAP server to store user data, choose the appropriate value. Then continue with configuration of your client after pressing <b>Next</b></p>.");

map button_labels = $[
    // radiobutton to select ldap user auth.
    "ldap":      _("&LDAP"),
    // radiobutton to select nis user auth.
    "nis":       _("N&IS"),
    // radiobutton to select local user auth.
    "users":     _("Local (/etc/passwd)")
];

list<string> available_clients = [];

if (Require::IsPackageAvailable("yast2-nis-client") && found)
    available_clients = add (available_clients, "nis");

available_clients = add (available_clients, "ldap");
available_clients = add (available_clients, "users");

term buttons = `VBox (`VSpacing(0.5));

foreach (string client, available_clients, ``{
    buttons = add (buttons,
	`Left(`RadioButton(`id(client), button_labels[client]:"")));
});

buttons = add (buttons, `VSpacing(0.5));

// set LDAP for default, if ldap-server was configured:
if (size (Ldap::initial_defaults) > 0)
    Users::SetAfterAuth ("ldap");

term contents = `VBox (
		       `VStretch(),
		       `HBox (
			      `HStretch(),
			      // frame title for authentication methods
			      `Frame (_("Authentication Method"),
				      `RadioButtonGroup( buttons )
				      ),
			      `HStretch()
			      ),
		       `VStretch()
		       );
Wizard::SetDesktopIcon("users");
Wizard::SetContents (caption, contents, help,
		    (boolean) WFM::Args(0), (boolean) WFM::Args(1));

// select and enable to correct buttons
foreach (string client, available_clients, ``{
    UI::ChangeWidget (`id(client), `Value, Users::AfterAuth () == client);
});

any ret = nil;

repeat {

    ret = Wizard::UserInput();

    if (ret == `abort)
    {
	if ( Popup::ConfirmAbort (`incomplete) )
	    break;
    }
    else if ( ret == `help )
    {
	Wizard::ShowHelp (help);
    }

} until ( ret == `next || ret == `back );

if ( (boolean) UI::QueryWidget( `id("ldap"), `Value ) )
    Users::SetAfterAuth ("ldap");
if ( (boolean) UI::QueryWidget( `id("nis"), `Value ) )
    Users::SetAfterAuth ("nis");
if ( (boolean) UI::QueryWidget( `id("users"), `Value ) )
    Users::SetAfterAuth ("users");

return (symbol) ret;

/* EOF */
}
