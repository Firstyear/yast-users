/**
 * File:
 *   users_auto.ycp
 *
 * Package:
 *   Configuration of Users
 *
 * Summary: TODO
 *
 * $Id$
 *
 */


{
    textdomain "users"; //FIXME - own textdomain (so the new plugin package
			// won't affect original users package)
    import "Users";
    import "Label";
    import "Wizard";

    import "UsersPluginDummy";//import module, which does low-level changes

    any ret = nil;
    string func = "";
    map<string,any> param = $[];
    /* Check arguments */
    if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
	func = (string) WFM::Args(0);
	if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	    param = (map<string,any>)WFM::Args(1);
    }
    y2milestone("----------------------------------------");
    y2milestone("users dummy plugin started");

    y2internal ("func=%1", func);
    y2debug ("param=%1", param);

    if (func == "Summary") {
	// plugin name
	ret = _("Dummy plugin");
    }
    else if (func == "Interface") {
	// return list of available functions
	ret = [ "Summary", "Dialog", "Interface", "BeforeWrite" ];
    }
    else if (func == "Dialog") {
	// define the dialog for this plugin and return it's contents

	string caption	= _("Dummy plugin");
	string help	= "";
	map data	= param["data"]:$[];

	// LDAP attribute could have a list or single value
	any roomNumber	= data["roomNumber"]:nil;
	if (roomNumber == nil)
	    roomNumber = "";
	if (is (roomNumber, list))
	    roomNumber	= mergestring ((list<string>)roomNumber, ",");
	else roomNumber = sformat ("%1", roomNumber);

	term contents = `HBox (`HSpacing (), `VBox (
	    `VSpacing (),
	    `Frame (`id(`f), _("Dummy options"), `HBox (`HSpacing (0.5), `VBox(
		`VSpacing (5),
		`TextEntry (`id(`d), _("Dummy Value"), data["dummy"]:""),
		`VSpacing (1),
		`TextEntry (`id(`r), _("Some real LDAP attribute (roomNumber)"),
		    roomNumber),
		`VSpacing (1),
		`CheckBox (`id(`d_ch), _("Dummy Check"),data["dummy_ch"]:false),
		`Bottom (`HBox (
		    `Right (`PushButton (`id(`apply), _("Apply")))
		))
	    ),`HSpacing (0.5))),
	    `VSpacing ()), `HSpacing ()
	);

	ret = contents;
    }
    else if (func == "Change") {

	// now the dialog defined in "Dialog" section is shown, we
	// should handle user input

	string what	= param["what"]:"user";
	map new_data	= $[];

	// if `apply was not pushed, return UserInput
	repeat
	{
	    ret = UI::UserInput();
	    if (ret == `apply)
	    {
		// save data -> return the updated user/group map to the caller
		string roomNumber = (string) UI::QueryWidget (`id(`r), `Value);
		new_data["roomNumber"]	= splitstring (roomNumber, ",");
		new_data["dummy"]	= UI::QueryWidget (`id(`d), `Value);
/*		new_data["dummy_ch"]	= (boolean)
		    UI::QueryWidget (`id(`d_ch), `Value);
FIXME booleans are broken by Perl...
*/
		ret = new_data;
		return ret;
	    }
	} until (contains ([`next, `abort, `back, `cancel, `tree], ret));
    }
    else if (func == "Edit") {
	// TODO
	// take map of user/group as parameter and update its settings
	// - use e.g. in cmd-line or web interface
	ret = false;
    }
    else if (func == "BeforeWrite") {
	// do the additional actions before user/group is written
	string what		= param["what"]:"user";
	map<string,any> data	= param["data"]:$[];
	if (what == "user")
	    ret = UsersPluginDummy::WriteUserBefore (data);
	else if (what == "group")
	    ret = UsersPluginDummy::WriteGroupBefore (data);
    }
    else if (func == "Write") {
	// do the additional actions after user/group is written (into LDAP)
	string what		= param["what"]:"user";
	map<string,any> data	= param["data"]:$[];
	if (what == "user")
	    ret = UsersPluginDummy::WriteUser (data);
	else if (what == "group")
	    ret = UsersPluginDummy::WriteGroup (data);
    }
    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	ret = false;
    }

    y2debug ("ret=%1", ret);
    y2milestone("users plugin finished");
    y2milestone("----------------------------------------");

    return ret;
}
