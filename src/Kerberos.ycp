/**
 * File:	modules/Kerberos.ycp
 * Module:	Configuration of Kerberos client
 * Summary:	client configuration data, I/O functions.
 * Authors: Jiri Suchomel <jsuchome@suse.cz>
 */

{

module "Kerberos";
textdomain "kerberos";

import "Summary";

// if pam_krb5 module is used for login
global boolean use_pam_krb = false;

// required/optional/sufficient
global string control = "";

// argumets to pam module
global string arguments = "";

// default realm name
global string default_realm = "";

// adress of KDC (key distribution centre) server for default realm
global string kdc = "";

global string clockskew = "";


/**
 * Get all the Kerberos configuration from a map.
 * @return	success
 */
global define boolean Import (map settings) ``{
	return true;
}

/**
 * Only set variables, without checking anything
 * @return: void
 */
global define void Set(map settings)  ``{

	return;
}

/**
 * Dump the Kerberos settings to a map, for autoinstallation use.
 */
global define map Export () ``{
	return $[];
}

global define string ReadString (path path_to_value) ``{

    string value = SCR::Read (path_to_value);
    if (value == nil)
        value = "";

    return value;
}

/**
 * Reads Kerberos settings from the SCR
 * @return success
 */
global define boolean Read () ``{

    // first, read the pam settings
    // currently, only /etc/pam.d/login is checked
    list pam_login = SCR::Read(.pam.login);
    foreach (`line, pam_login, ``{
        if ( line["type"]:"" == "auth" &&
             issubstring (line["module"]:"", "pam_krb5.so"))
        {
            use_pam_krb = true;
            // only the first is taken
            if (control == "")
                control = line["control"]:"";
            if (arguments == "")
                arguments = line["arguments"]:"";
        }
    });

    // now read the settings from /etc/krb5.conf
    if (SCR::Execute (.target.bash, "/usr/bin/test -e /etc/krb5.conf") == 0)
    {
        y2debug("krb5.conf sections: %1", SCR::Dir(.etc.krb5_conf.s));

        default_realm = ReadString (.etc.krb5_conf.v.libdefaults.default_realm);

        clockskew = ReadString (.etc.krb5_conf.v.libdefaults.clockskew);

        kdc = ReadString ( add ( add (.etc.krb5_conf.v, default_realm), "kdc"));
    }
    else
        SCR::Execute (.target.bash, sformat("/usr/bin/touch /etc/krb5.conf"));

    return true;
}

/**
 * Saves Kerberos configuration.
 * (No parameters because it is too short to abort)
 * @return true on success
 */
global define boolean Write (boolean writeonly) ``{

    boolean pam_installed = false;
    boolean ret = true;

    // -- pam settings
    if (use_pam_krb)
    {
        if (SCR::Execute(.target.bash, "rpm -q pam_krb5") ==0)
           pam_installed = true;
        else
        {
            // Popup text (required application):
            if (UI::YesNoPopup(_("To configure PAM autentification with Kerberos,
the package \"pam_krb5\" is necessary.
Install this package now?")))
            {
                include "require.ycp"; // is it possible to have it here??
                pam_installed = DoInstallAndRemove(["pam_krb5"], []);
            }
        }
        if (pam_installed)
        {
            // write to /etc/pam.d/*
            y2milestone ("save --");
//            SCR::Write(.pam.login.pam_krb5.module, "+auth");
//            SCR::Write(.pam.login.auth.pam_krb5, "+module");
        }
        else
            // instalation not succesful ?
            ret = false;
    }

    // -- write to /etc/krb5.conf

    // change the default realm name
    SCR::Write(.etc.krb5_conf.v.libdefaults.default_realm, default_realm);

    if (contains (SCR::Dir(.etc.krb5_conf.s), default_realm))
    {
        // update the default realm settings
        SCR::Write(
            add (add (.etc.krb5_conf.v, default_realm), "kdc"), kdc);
    }
    else
    {
        // specify the type of this subsection
        SCR::Write( add (.etc.krb5_conf.st.realms, default_realm), 1);
        // write the settings of the new default realm
        SCR::Write(
            add (add (.etc.krb5_conf.v.realms, default_realm), "kdc"), kdc);
    }

    return ret;
}


/**
 * Summary()
 * returns html formated configuration summary
 * @return string
 */
global define Summary () ``{

	string summary = "";
	return summary;
}

}
