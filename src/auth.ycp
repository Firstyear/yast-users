/**
 *
 * $Id$
 *
 * Module:
 *
 * Author:
 *
 * Purpose:
 */

{

textdomain "users";

import "Wizard";
import "Users";
import "Mode";
include "ui/common_messages.ycp";
//include "users/nis_routines.ycp";


    // Help text
    string help_text = _("<p>
<b>User lists</b>
</p>");

    help_text = help_text + _("<p>These are read from <i>/etc/nsswitch.conf</i>.
</p>");

    help_text = help_text + _("<p>
<b>Additional authentification</b>
</p>");

    help_text = help_text + _("<p>This is checked with pam-agent.
</p>");

    //    list supported_users_sources = [ "nis", "ldap", "files", "compat" ];

    define void reload_config() ``{

        // checking /etc/nsswitch.conf
        list users_sources = Users::GetUsersSources ();
        map to_string = $[
            "nis"   : _("NIS"),
            "ldap"  : _("LDAP"),
            "files" : _("Local files"),
            "compat": _("Compat")
         ];

        string sources_text = "";
        foreach (`source, users_sources, ``{

    //        UI::ChangeWidget(`id(passwd_source), `Value, true);
            /*
            if (passwd_source == "compat") // what doues this _really_ mean?
            {
                UI::ChangeWidget(`id("nis"), `Value, true);
                UI::ChangeWidget(`id("files"), `Value, true);
            }
            */
            sources_text = sources_text + to_string [source]:"" + "<br>";
        });
        UI::ChangeWidget(`id(`sources), `Value, sources_text);

        // check for pam settings (/etc/security/pam_unix2.conf)
        map pam_auth_map = $[];
        list pam_auth_list = SCR::Read (.pam.all.auth.pam_unix);
        if (pam_auth_list != [] && pam_auth_list != nil)
            pam_auth_map = select (pam_auth_list,0,$[]);

        list pam_args = splitstring ( pam_auth_map ["arguments"]:"", " ");
        string auth_text = "";

        if ( contains (pam_args, "use_ldap"))
            auth_text = auth_text + to_string ["ldap"]:"" + "<br>";

        UI::ChangeWidget(`id(`auth), `Value, auth_text);
    }

    term contents = `HBox(
        `HSpacing(1),
        `VBox(
        `VSpacing( 1 ),
        `HBox( `HSpacing(12),
        // frame label
        `Frame( _("Users lists"),
            `HBox(
            `HSpacing(1),
            `VBox(
                `VSpacing( 0.5 ),
                /*
                `CheckBox (`id("nis"), "NIS", false),
                `CheckBox (`id("ldap"), "LDAP", false),
                `CheckBox (`id("files"), _("local files"), false),
                `CheckBox (`id("compat"), _("compat"), false),*/
                `RichText (`id(`sources), ""),
                `VSpacing( 0.5 )
                ),
            `HSpacing(1))
        ),
        `HSpacing (12)),

        `VSpacing( 1 ),
        `HBox( `HSpacing(12),
        // frame label
        `Frame( _("Additional authentification (PAM settings)"),
            `HBox(
            `HSpacing (1),
            `VBox(
                `VSpacing( 0.5 ),
                `RichText (`id(`auth), ""),
                `VSpacing( 0.5 )
                ),
            `HSpacing (1))
        ),
        `HSpacing (12)),

        `VSpacing( 1 ),
        `MenuButton(_("&Configure ..."), [
            `item(`id(`conf_nis), "NIS"),
            `item(`id(`conf_ldap), "LDAP"),
            `item(`id(`conf_krb), "Kerberos")]),
        `VSpacing( 1 )
        )
    );

    // dialog title
    string title = _("Expert Login Options");

    Wizard::CreateDialog(); // just a hack, only for testing

// Wizard::SetContents(title, contents, helptext, Args(0), Args(1));
    Wizard::SetContents (title, contents, help_text, true, true);

    reload_config();


    symbol button = nil;

    do
    {
        button = UI::UserInput();

        if ( button == `conf_nis)
        {
            WFM::CallModule("nis", []);
            reload_config ();
        }

        if ( button == `conf_ldap)
        {
            WFM::CallModule("ldap", []);
            reload_config ();
        }

        if ( button == `conf_krb)
        {

        }

    } while ( button != `next && button != `abort && button != `back );

    return button;
}
