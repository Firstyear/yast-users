/**
 * File:	include/users/routines.ycp
 * Package:	Configuration of users and groups
 * Summary:	users/groups read and write routines
 * Authors:	Johannes Buchhold <jbuch@suse.de>,
 *          Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */
{
include "users/passwd.ycp";

/**
 * Reads prebuilded gshadow data
 * @param dir the input directory
 * @return gshadow map
 */
global define map ReadGshadow(string dir)``{

    return $[
        `local: SCR::Read(.target.ycp, dir + "/gshadow_local.ycp"),
        `system: SCR::Read(.target.ycp, dir + "/gshadow_system.ycp")
    ];
}

/**
 * Reads prebuilded shadow data
 * @param dir the input directory
 * @return shadow map
 */
global define map ReadShadow(string dir)``{

    return $[
        `local: SCR::Read(.target.ycp, dir + "/shadow_local.ycp"),
        `system: SCR::Read(.target.ycp, dir + "/shadow_system.ycp")
    ];
}

/**
 * Reads prebuilded groups data
 * @param dir the input directory
 * @return groups map
 */
global define map ReadGroups(string dir)``{

    return $[
        `local: SCR::Read(.target.ycp, dir + "/group_local.ycp"),
        `system: SCR::Read(.target.ycp, dir + "/group_system.ycp")
    ];
}

/**
 * Reads prebuilded groups data
 * @param dir the input directory
 * @return groups map
 */
global define map ReadGroupsByName(string dir)``{

    return $[
        `local: SCR::Read(.target.ycp, dir + "/group_local_byname.ycp"),
        `system: SCR::Read(.target.ycp, dir + "/group_system_byname.ycp")
    ];
}

/**
 * Reads prebuilded passwd data
 * @param dir the input directory
 * @return users map
 */
global define map ReadPasswd(string dir)``{

    return $[
        `local: SCR::Read(.target.ycp, dir + "/passwd_local.ycp"),
        // this is due to translations of fullnames in users/passwd.ycp
        `system: eval (SCR::Read(.target.ycp, dir + "/passwd_system.ycp"))
    ];
}

/**
 * Reads prebuilded passwd data
 * @param dir the input directory
 * @return users map
 */
global define map ReadPasswdByName(string dir)``{

    return $[
        `local: SCR::Read(.target.ycp, dir + "/passwd_local_byname.ycp"),
        `system: SCR::Read(.target.ycp, dir + "/passwd_system_byname.ycp")
    ];
}

/**
 * Reads the line begining with + or - from the data files, if exists
 * @param file the input file
 * @return the line
 */
global define string PlusFile (string file) ``{

    if (SCR::Execute (.target.bash, sformat("/usr/bin/test -e %1", file)) == 0)
        return SCR::Read(.target.ycp, file);
    else
        return "";
}

/**
 * Reads the line begining with + or - from gshadow file
 * @param dir the input directory
 * @return the line
 */
global define string ReadPlusGshadow(string dir)``{

    return PlusFile (dir + "/plus_gshadow.ycp");
//    return SCR::Read(.target.ycp, dir + "/plus_gshadow.ycp");
}

/**
 * Reads the line begining with + or - from shadow file
 * @param dir the input directory
 * @return the line
 */
global define string ReadPlusShadow(string dir)``{

    return PlusFile (dir + "/plus_shadow.ycp");
}

/**
 * Reads the line begining with + or - from group file
 * @param dir the input directory
 * @return the line
 */
global define string ReadPlusGroup(string dir)``{

    return PlusFile (dir + "/plus_group.ycp");
}

/**
 * Reads the line begining with + or - from passwd file
 * @param dir the input directory
 * @return the line
 */
global define string ReadPlusPasswd(string dir)``{

    return PlusFile (dir + "/plus_passwd.ycp");
}

/**
 * Check if authentication with pam_krb5 is used
 * @return type of authentication: required/optional/sufficient/[empty string]
 */
global define string KerberosAuth () ``{

    list pam_auth_list = SCR::Read (.pam.login);
    string ret = "";
    foreach (`line, pam_auth_list, ``{
        if (issubstring (line["module"]:"", "pam_krb5.so") &&
            line["type"]:"" == "auth" && ret == "")
                ret = line["control"]:"";
    });
    return ret;
}

/**
 * Writes data to group file (probably /etc/group)
 * @param basedir the directory for output
 * @param system_groups map of groups
 * @param local_groups map of groups
 * @param plus the line begining with +/-
 * @return succes
 */
global define boolean WriteGroup(string basedir, map system_groups, map local_groups, string plus) ``{

    string conf_path = basedir + "/group";
    list modified_list = [];
    list list_to_save = maplist (`gid, `group, system_groups, ``{
        string to_save = sformat("%1:%2:%3:%4",
            group["groupname"]:"",
            "x",//group["password"]:"",// TODO what if there should be * or !
            group["gid"]:max_gid,
            group["userlist"]:"");
        return to_save;
    });
    list_to_save = merge(list_to_save, maplist (`gid, `group, local_groups, ``{
        string to_save = sformat("%1:%2:%3:%4",
            group["groupname"]:"",
            "x",//group["password"]:"",
            group["gid"]:max_gid,
            group["userlist"]:"");
        return to_save;
    }));
    string string_to_save = mergestring (list_to_save, "\n");
    if (plus != "" && plus != nil)
        string_to_save = string_to_save + "\n" + plus;
    string_to_save = string_to_save + "\n";
    boolean ret = SCR::Write(.target.string, conf_path, string_to_save);
    y2milestone("Succesfuly written %1: %2", conf_path, ret);
    return ret;
}


/**
 * Writes data to passwd file (probably /etc/passwd)
 * @param basedir the directory for output
 * @param system_users map of users
 * @param local_users map of users
 * @param plus the line begining with +/-
 * @return succes
 */
global define map WritePasswd(string basedir, map system_users, map local_users, string plus) ``{

    string conf_path = basedir + "/passwd";
    map modified_map = $[];
    list list_to_save = maplist (`uid, `user, system_users, ``{
        string to_save = sformat("%1:%2:%3:%4:%5:%6:%7",
            user["username"]:"",
            "x",//user["password"]:"",// write x !!
            uid,
            user["gid"]:max_gid,
            user["fullname"]:"",
            user["home"]:"",
            user["shell"]:"");
        if (user["modified"]:`nothing != `nothing)
            modified_map = add (modified_map, uid, user);
        return to_save;
    });
    list_to_save = merge(list_to_save, maplist (`uid, `user, local_users, ``{
        string to_save = sformat("%1:%2:%3:%4:%5:%6:%7",
            user["username"]:"",
            "x",//user["password"]:"",// write x !!
            uid,
            user["gid"]:max_gid,
            user["fullname"]:"",
            user["home"]:"",
            user["shell"]:"");
        if (user["modified"]:`nothing != `nothing)
            modified_map = add (modified_map, uid, user);
        return to_save;
    }));
    string string_to_save = mergestring (list_to_save, "\n");
    if (plus != "" && plus != nil)
        string_to_save = string_to_save + "\n" + plus;
    string_to_save = string_to_save + "\n";
    boolean ret = SCR::Write(.target.string, conf_path, string_to_save);
    y2milestone("Succesfuly written %1: %2", conf_path, ret);

    if (ret)
        return modified_map;
    else
        return nil;
}

/**
 * Writes data to shadow file (probably /etc/shadow)
 * @param basedir the directory for output
 * @param system_shadow map of shadow
 * @param local_shadow map of shadow
 * @param plus the line begining with +/-
 * @return succes
 */
global define boolean WriteShadow(string basedir, map system_shadow, map local_shadow, string plus) ``{

    string conf_path = basedir + "/shadow";

    list list_to_save = maplist (`username, `entry, system_shadow, ``{
        string to_save = sformat("%1:%2:%3:%4:%5:%6:%7:%8:%9",
            username,
            entry["password"]:"",
            entry["last_change"]:"",
            entry["min"]:"",
            entry["max"]:"",
            entry["warn"]:"",
            entry["inact"]:"",
            entry["expire"]:"",
            entry["flag"]:"");
        return to_save;
    });
    list_to_save = merge(list_to_save, maplist (`username, `entry, local_shadow, ``{
        string to_save = sformat("%1:%2:%3:%4:%5:%6:%7:%8:%9",
            username,
            entry["password"]:"",
            entry["last_change"]:"",
            entry["min"]:"",
            entry["max"]:"",
            entry["warn"]:"",
            entry["inact"]:"",
            entry["expire"]:"",
            entry["flag"]:"");
        return to_save;
    }));
    string string_to_save = mergestring (list_to_save, "\n");
    if (plus != "" && plus != nil)
        string_to_save = string_to_save + "\n" + plus;
    string_to_save = string_to_save + "\n";
    boolean ret = SCR::Write(.target.string, conf_path, string_to_save);
    y2milestone("Succesfuly written %1: %2", conf_path, ret);
    return ret;
}


/**
 * Writes data to gshadow file (probably /etc/gshadow)
 * @param basedir the directory for output
 * @param system_gshadow map of gshadow
 * @param local_gshadow map of gshadow
 * @param plus the line begining with +/-
 * @return succes
 */
global define boolean WriteGshadow(string basedir, map system_gshadow, map local_gshadow, string plus) ``{

    string conf_path = basedir + "/gshadow";
    list list_to_save = maplist (`groupname, `entry, system_gshadow, ``{
        string to_save = sformat("%1:%2:%3:%4",
            groupname,
            entry["password"]:"",
            entry["disposer"]:"",
            entry["userlist"]:"");
        return to_save;
    });
    list_to_save = merge(list_to_save, maplist (`groupname, `entry, local_gshadow, ``{
        string to_save = sformat("%1:%2:%3:%4",
            groupname,
            entry["password"]:"",
            entry["disposer"]:"",
            entry["userlist"]:"");
        return to_save;
    }));
    string string_to_save = mergestring (list_to_save, "\n");
    if (plus != "" && plus != nil)
        string_to_save = string_to_save + "\n" + plus;
    string_to_save = string_to_save + "\n";
    boolean ret = SCR::Write(.target.string, conf_path, string_to_save);
    y2milestone("Succesfuly written %1: %2", conf_path, ret);
    return ret;
}

/**
 * Backup /etc/passwd, shadow, group and gshadow files
 * @param dir the source directory
 */
global define void BackupConfFiles(string dir)``{

    SCR::Execute(.target.bash,
        sformat ("/bin/cp %1/shadow %1/shadow.YaST2save", dir));
    SCR::Execute(.target.bash,
        sformat ("/bin/cp %1/passwd %1/passwd.YaST2save", dir));
    SCR::Execute(.target.bash,
        sformat ("/bin/cp %1/gshadow %1/gshadow.YaST2save", dir));
    SCR::Execute(.target.bash,
        sformat ("/bin/cp %1/group %1/group.YaST2save", dir));
}

} // EOF
