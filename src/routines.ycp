/**
 * File:	include/users/routines.ycp
 * Package:	Configuration of users and groups
 * Summary:	users/groups read and write routines
 * Authors:	Johannes Buchhold <jbuch@suse.de>,
 *          Jiri Suchomel <jsuchome@suse.cz>
 *
 */
{


global define map ReadGshadow(string dir)``{

    return SCR::Read(.target.ycp, dir + "/gshadow.ycp");
}

global define map ReadShadow(string dir)``{

    return SCR::Read(.target.ycp, dir + "/shadow.ycp");
}

global define map ReadGroups(string dir)``{

    return $[
        `local: SCR::Read(.target.ycp, dir + "/group_local.ycp"),
        `system: SCR::Read(.target.ycp, dir + "/group_system.ycp")
    ];
}

global define map ReadGroupsByName(string dir)``{

    return SCR::Read(.target.ycp, dir + "/group_byname.ycp");
}

global define map ReadPasswd(string dir)``{

    return $[
        `local: SCR::Read(.target.ycp, dir + "/passwd_local.ycp"),
        `system: SCR::Read(.target.ycp, dir + "/passwd_system.ycp")
    ];
}

global define map ReadPasswdByName(string dir)``{

    return $[
        `local: SCR::Read(.target.ycp, dir + "/passwd_local_byname.ycp"),
        `system: SCR::Read(.target.ycp, dir + "/passwd_system_byname.ycp")
    ];
}

global define map ReadNISUsers(string dir)``{

    return SCR::Read(.target.ycp, dir + "/nis.ycp");
}

global define map ReadNISUsersByName(string dir)``{

    return SCR::Read(.target.ycp, dir + "/nis_byname.ycp");
}

global define string ReadPlusGshadow(string dir)``{

    return SCR::Read(.target.ycp, dir + "/plus_gshadow.ycp");
}

global define string ReadPlusShadow(string dir)``{

    return SCR::Read(.target.ycp, dir + "/plus_shadow.ycp");
}

global define string ReadPlusGroup(string dir)``{

    return SCR::Read(.target.ycp, dir + "/plus_group.ycp");
}

global define string ReadPlusPasswd(string dir)``{

    return SCR::Read(.target.ycp, dir + "/plus_passwd.ycp");
}

/**
 * Returns a map with users retrieved from `getent passwd` and
 * not contained in other set (passwd and nis).
 * Currently is it supposed that they are the LDAP users
 */
global define map ReadLDAPUsers(string dir) ``{

    return (SCR::Read(.target.ycp, dir + "/getent.ycp"));
}

global define map ReadLDAPUsersByName(string dir) ``{

    return (SCR::Read(.target.ycp, dir + "/getent_byname.ycp"));
}

/**
 */
global define boolean WriteLDAPUsers(map ldap_users) ``{

    if (ldap_users != $[])

    foreach (`uid, `user, ldap_users, ``{

        if (user["modified"]:`nothing != `nothing)
        {
            y2milestone ("There is a change of LDAP user with id %1, but it is not possible to save it yet...", uid);
        }

    });

    return true;
}

/** Does it make sense?
 */
global define boolean ReadLDAPGroups() ``{

    return (SCR::Read(.target.ycp, dir + "/getent_group.ycp"));
}

/**
  */
global define boolean IsLDAPServer () ``{

    y2milestone("dir ldap: %1", SCR::Dir(.etc.openldap.ldap_conf));
    string host = SCR::Read(.etc.openldap.ldap_conf.host);
    y2milestone("read ldap.host: %1", host);

    if (host == "localhost" || host == "127.0.0.1")
        return true;
    return false;
}

/**
  */
global define boolean IsLDAPPresent () ``{

    y2milestone("dir nsswitch: %1", SCR::Dir(.etc.nsswitch_conf));
    string passwd_source = SCR::Read(.etc.nsswitch_conf.passwd);
    y2milestone("read nsswitch.passwd: %1", passwd_source);

    if (issubstring(passwd_source, "ldap")) // is it ok??
        return true;

    return false;
}


/**  -- using target.string
 */
//global define list WriteGroup(string basedir, map system_groups, map local_groups, string plus) ``{
global define boolean WriteGroup(string basedir, map system_groups, map local_groups, string plus) ``{

    string conf_path = basedir + "/group";
    list modified = [];
    list list_to_save = maplist (`gid, `group, system_groups, ``{
        string to_save = sformat("%1:%2:%3:%4",
            group["groupname"]:"",
            "x",//group["password"]:"",// write x !!
            group["gid"]:max_gid,
            group["userlist"]:"");
        if (group["modified"]:`nothing != `nothing)
            modified = add (modified, group);
        return to_save;
    });
    list_to_save = merge(list_to_save, maplist (`gid, `group, local_groups, ``{
        string to_save = sformat("%1:%2:%3:%4",
            group["groupname"]:"",
            "x",//group["password"]:"",// write x !!
            group["gid"]:max_gid,
            group["userlist"]:"");
        if (group["modified"]:`nothing != `nothing)
            modified = add (modified, group);
        return to_save;
    }));
    string string_to_save = mergestring (list_to_save, "\n");
    if (plus != "" && plus != nil)
        string_to_save = string_to_save + "\n" + plus;
    boolean ret = SCR::Write(.target.string, conf_path, string_to_save);
    y2milestone("Succesfuly written %1: %2", conf_path, ret);
    return ret;
//    return modified;
}


/**  -- using target.string
 */
global define list WritePasswd(string basedir, map system_users, map local_users, string plus) ``{

    string conf_path = basedir + "/passwd";
    list modified = [];
    list list_to_save = maplist (`uid, `user, system_users, ``{
        string to_save = sformat("%1:%2:%3:%4:%5:%6:%7",
            user["username"]:"",
            "x",//user["password"]:"",// write x !!
            user["uid"]:max_uid,
            user["gid"]:max_gid,
            user["fullname"]:"",
            user["home"]:"",
            user["shell"]:"");
        if (user["modified"]:`nothing != `nothing)
            modified = add (modified, user);
        return to_save;
    });
    list_to_save = merge(list_to_save, maplist (`uid, `user, local_users, ``{
        string to_save = sformat("%1:%2:%3:%4:%5:%6:%7",
            user["username"]:"",
            "x",//user["password"]:"",// write x !!
            user["uid"]:max_uid,
            user["gid"]:max_gid,
            user["fullname"]:"",
            user["home"]:"",
            user["shell"]:"");
        if (user["modified"]:`nothing != `nothing)
            modified = add (modified, user);
        return to_save;
    }));
    string string_to_save = mergestring (list_to_save, "\n");
    if (plus != "" && plus != nil)
        string_to_save = string_to_save + "\n" + plus;
    boolean ret = SCR::Write(.target.string, conf_path, string_to_save);
    y2milestone("Succesfuly written %1: %2", conf_path, ret);

    if (ret)
        return modified;
    else
        return nil;
}

/**  -- using target.string
 */
global define boolean WriteShadow(string basedir, map shadow, string plus) ``{

    string conf_path = basedir + "/shadow";

    list list_to_save = maplist (`username, `entry, shadow, ``{
        string to_save = sformat("%1:%2:%3:%4:%5:%6:%7:%8:%9",
            username,
            entry["password"]:"",
            entry["last_change"]:"",
            entry["min"]:"",
            entry["max"]:"",
            entry["warn"]:"",
            entry["inact"]:"",
            entry["expire"]:"",
            entry["flag"]:"");
        return to_save;
    });
    string string_to_save = mergestring (list_to_save, "\n");
    if (plus != "" && plus != nil)
        string_to_save = string_to_save + "\n" + plus;
    boolean ret = SCR::Write(.target.string, conf_path, string_to_save);
    y2milestone("Succesfuly written %1: %2", conf_path, ret);
    return ret;
}


/**  -- using target.string
 */
global define boolean WriteGshadow(string basedir, map gshadow, string plus) ``{

    string conf_path = basedir + "/gshadow";
    list list_to_save = maplist (`groupname, `entry, gshadow, ``{
        string to_save = sformat("%1:%2:%3:%4",
            groupname,
            entry["password"]:"",
            entry["disposer"]:"",
            entry["userlist"]:"");
        return to_save;
    });
    string string_to_save = mergestring (list_to_save, "\n");
    if (plus != "" && plus != nil)
        string_to_save = string_to_save + "\n" + plus;
    boolean ret = SCR::Write(.target.string, conf_path, string_to_save);
    y2milestone("Succesfuly written %1: %2", conf_path, ret);
    return ret;
}

/** -- using agent
 *
global define boolean WritePasswd(map passwd_users) ``{

    path passwd_path  = .tmp.passwd;
//    string conf_path = basedir + "/passwd";
    string conf_path = "/tmp/passwd";
    string tmpfile = SCR::Read (.target.tmpdir) + "/passwd";
    string data = sformat ("%1

`ag_anyagent(
  Description (
      ``(File(\"%2\")),  // real filename
      \"#\",                      // Comment
      false,
      ``(List (
        Or (
          Tuple (
          `username (String(\"+\")),
          \":\",
          `password (String (\"\")),
          \":\",
          `uid (String (\"\")),
          \":\",
          `gid (String (\"\")),
          \":\",
          `fullname (String (\"\")),
          \":\",
          `home (String (\"\")),
          \":\",
          `shell (String (\"\"))
        ),

        Tuple (
          `username (String (\"^:\")),
          \":\",
          `password (Or (String (\"^:\"), \"\")),
          \":\",
          `uid (Number ()),
          \":\",
          `gid (Number ()),
          \":\",
          `fullname (Or (String (\"^:\"), \"\")),
          \":\",
          `home (String (\"^:\")),
          \":\",
          `shell (String (\"^\n\"))
        )),
        \"\n\"
      ))
    )
)", passwd_path, conf_path);
    SCR::Write (.target.string, tmpfile, data);
    SCR::RegisterAgent(passwd_path, tmpfile);

    list list_to_save = maplist (`uid, `user, passwd_users, ``{
        map to_save = $[
            "username": user["username"]:"",
            "password": "x",//user["password"]:"",
            "uid": user["uid"]:max_uid,
            "gid": user["gid"]:max_gid,
            "fullname": user["fullname"]:"",
            "home": user["home"]:"",
            "shell": user["shell"]:""];
        return to_save;
    });
    return SCR::Write( passwd_path, list_to_save);
}*/

/**
  * Backup /etc/passwd, shadow, group and gshadow files
  */
global define void BackupConfFiles(string dir)``{

    SCR::Execute(.target.bash,
        sformat ("/bin/cp %1/shadow %1/shadow.YaST2save", dir));
    SCR::Execute(.target.bash,
        sformat ("/bin/cp %1/passwd %1/passwd.YaST2save", dir));
    SCR::Execute(.target.bash,
        sformat ("/bin/cp %1/gshadow %1/gshadow.YaST2save", dir));
    SCR::Execute(.target.bash,
        sformat ("/bin/cp %1/group %1/group.YaST2save", dir));
}



} // EOF
