/**
 * File:	include/users/wizards.ycp
 * Package:	Configuration of users and groups
 * Summary:	Wizards definitions
 * Authors:	Johannes Buchhold <jbuch@suse.de>,
 *          Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "users";

import "Mode";
import "Label";
import "Sequencer";
import "Wizard";

import "UsersCache";
import "Users";

include "users/complex.ycp";
include "users/dialogs.ycp";

// ------------------ test CWM ----------------------------------------------
// --------------------------------------------------------------------------

import "CWM";
include "users/widgets.ycp";

define boolean ReallyBack () ``{
    if (!Mode::cont && Users::Modified())
	return Popup::ReallyAbort (Users::Modified());
    else return true;
}

define symbol SummaryDialog() ``{

    term contents = `VBox (
	`HBox (`Left ("rb_users_groups")),
        "table",
	"advanced_buttons"
    );

    any ret = CWM::ShowAndRun (
	["rb_users_groups", "table", "advanced_buttons" ],
	widgets,
	contents,
	// dialog caption
	_("User and Group Administration"),
	Label::BackButton (),
	Mode::cont ? Label::NextButton() : Label::FinishButton (),
	$[
	    `back: ReallyBack
	]
    );
    if (ret != nil && contains ([`new, `edit, `delete], ret))
    {
	map update_symbol = $[
	    `new: $[
		"users" : `new_user,
		"groups": `new_group
	    ],
	    `edit: $[
		"users" : `edit_user,
		"groups": `edit_group
	    ],
	    `delete: $[
		"users" : `delete_user,
		"groups": `delete_group
	    ]
	];
	ret = update_symbol [ret, UsersCache::GetCurrentSummary ()]:`back;
    }

    return (symbol) ret;
}


// --------------------------------------------------------------------------
// --------------------------------------------------------------------------


/**
 * Main workflow of the users/groups configuration
 * @param start the first dialog
 * @return sequence result
 */
define symbol MainSequence(string start) ``{

    map aliases = $[
	"summary"		: ``(SummaryDialog ()),
	"user_add"		: ``(EditUserDialog("add_user")),
	"user_add_inst"		: ``(EditUserDialog("add_user")),
	"user_inst_start"	: [``(usersInstStart ()), true],
	"user_edit"		: ``(EditUserDialog("edit_user")),
	"user_details"		: ``(EditUserDetailsDialog()),
	"user_password"		: ``(EditUserPasswordDialog()),
//	"user_ldap"		: ``(LDAPSettingsDialog("user")),
	"user_plugin"		: ``(PluginDialog("user")),
	"user_save"		: [``(UserSave()), true],

	"group_add"		: ``(EditGroupDialog("add_group")),
	"group_edit"		: ``(EditGroupDialog("edit_group")),
//	"group_ldap"		: ``(LDAPSettingsDialog("group")),
	"group_plugin"		: ``(PluginDialog("group")),
	"group_save"		: [``(GroupSave()), true],

	"defaults"		: ``(DefaultsDialog()),
	"auth"			: ``(AuthentizationDialog()),
	"without_save"		: ``(ReallyAbort()),
    ];

    map main_sequence = $[
	"ws_start":             start,
	"summary":$[
	    `new_user		: "user_add",
	    `edit_user		: "user_edit",
	    `delete_user	: "user_save",
	    `new_group		: "group_add",
	    `edit_group		: "group_edit",
            `delete_group	: "group_save",
            `defaults		: "defaults",
	    `auth		: "auth",
	    `abort		: "without_save",
	    `cancel		: "without_save",
	    `next		: `next,
            `nosave		: `nosave,
	    `exit		: `abort,
	    `summary		: "summary"
	],
	"user_add": $[
            `nextmodule		: `next,
	    `nosave		: "summary",
	    `additional		: "user_save", // only install
	    `next		: "user_save",  // -> Commit
	    `details		: "user_details",
	    `passwordsettings	: "user_password",
	    `abort		: `abort,
	    `cancel		: `abort,
	],
	"user_add_inst": $[
            `nextmodule		: `next, // no user and next pressed (install)
            `nosave		: "summary",
            `additional		: "user_save",
            `next		: "user_save",
            `details		: "user_details",
            `passwordsettings	: "user_password",
            `abort		: "without_save",
            `cancel		: "without_save",
	],
	"user_edit": $[
            `next:		"user_save",
	    `details:		"user_details",
	    `passwordsettings:	"user_password",
	    `abort		: `abort,
	    `cancel		: `abort,
	],
	"user_inst_start": $[
            `next:          "user_add_inst"
	],
	"user_details": $[
	    // next is predefined to add or edit
            `abort:		"without_save",
	    `cancel:		"without_save",
//	    `add_user:		"user_add",
//	    `edit_user:		"user_edit",
//	    `ldap:		"user_ldap",
//	    `ldap:		"user_plugin",
	    `next:		"user_plugin",
	],
	"user_password": $[
            `abort:		"without_save",
	    `cancel:		"without_save",
	    `add_user:		"user_add",
	    `edit_user:		"user_edit"
	],
	/*
	"user_ldap": $[
            `abort:		"without_save",
	    `cancel:		"without_save",
//	    `add_user:		"user_add",
//	    `edit_user:		"user_edit"
	    // here could be plugin dialog...
	    `next:		"user_plugin"
	],
	*/
	"user_plugin": $[
            `abort:		"without_save",
	    `cancel:		"without_save",
	    `add_user:		"user_add",
	    `edit_user:		"user_edit",
	    `abort:		`abort,
	],
	"user_save": $[
            `next		: "summary",
	    `save		: `next//this should be write - during install??
        ],
	"group_add": $[
	    `nosave		: "summary",
            `next		: "group_save",
//	    `ldap		: "group_ldap",
	    `ldap		: "group_plugin",
	    `abort		: `abort,
	    `cancel		: `abort,
	],
        "group_edit": $[
            `next		: "group_save",
	    `ldap		: "group_plugin",
//	    `ldap		: "group_ldap",
	    `abort		: `abort,
	    `cancel		: `abort,
	],
	/*
        "group_ldap": $[
	    `next:		"group_plugin",
//	    `next:		"group_save",
	    `cancel:		"without_save",
	    `abort:		"without_save"
	],
	*/
	"group_plugin": $[
	    `next:		"group_save",
	    `abort:		`abort,
	],
        "group_save"  : $[
            `next		: "summary"
	],
        "defaults": $[
	    `abort		: "without_save",
            `next		: "summary"
	],
        "auth": $[
	    `abort		: "without_save",
            `next		: "summary"
	],
        "without_save": $[
            `next		: `next,
	    `abort		: `abort,
	    `back		: `back
	],
    ];

    return Sequencer::Run (aliases, main_sequence);
}

/**
 * Whole configuration of users/groups
 * @param start the first dialog
 * @return sequence result
 */
define symbol UsersSequence(string start) ``{

    map aliases = $[
	"read"  : [ ``( ReadDialog(!Mode::cont)), true ],
	"main"	:   ``( MainSequence( start ) ),
	"write" : [ ``( WriteDialog( true )), true ]// true as parameter ??
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main",
        `nextmodule: `next // this is for skiping users conf during install,
                           // see Users::CheckHomeMounted() or bug #20365
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write",
	    `nosave : `next
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    string caption = _("User and Group Configuration");
    term contents = `Label(_("Initializing ..."));

    if( ! Mode::cont )
    {
	Wizard::CreateDialog();
    }

    any ret = Sequencer::Run (aliases, sequence);

    if( ! Mode::cont )
	UI::CloseDialog();

    return (symbol) ret;
}

/**
 * Whole configuration of users/groups but without reading and writing.
 * For use with autoinstallation.
 * @param start the first dialog
 * @return sequence result
 */
define symbol AutoSequence(string start) ``{
    string caption = _("User and Group Configuration");
    term contents = `Label(_("Initializing ..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    symbol ret = MainSequence(start);

    UI::CloseDialog();
    return ret;
}

/* EOF */
}
