/**
 *
 * $Id$
 *
 * Module:      inst_root.ycp
 *
 * Author:      Klaus Kämpf <kkaempf@suse.de>
 *
 * Purpose:
 * Displays two input fields to get the root password from the user.
 * Plausibility checks executed:
 *
 *   - password must be given
 *   - first and second entry must match
 *   - length of password >= 5
 *   - only certain characters allowed
 *
 * After all the password is crypted and written into the user_settings.
 *
 *
 * SCR:     Write( .pam.all.password.pam_unix2   )
 *      Write( .pam.all.password.pam_pwcheck )
 */

{

textdomain "users";

import "Wizard";
import "Users";
import "Security";
import "Mode";
import "Progress";
include "ui/common_messages.ycp";

  if (Mode::cont && ! Mode::usessh)
  {
        // what is this for??
        SCR::Execute(.target.remove, "/var/lib/YaST2/runme_at_boot");
  }

  /**
   * "Expert" dialog for root password:
   * Let user choose the encryption method.
   **/
  define void expert_dialog() ``{

      // Help text for password expert dialog 1/5
      string help_text = _("<p>
<b>This is for experts only.</b>
</p>");

      // Help text for password expert dialog 2/5
      help_text = help_text + _("<p>
Choose a password encryption method.
<b>DES</b>, the Linux default method, works in all network environments, but it
restricts you to passwords no longer than eight characters.
</p>");

      // Help text for password expert dialog 3/5
      help_text = help_text + _("<p>
<b>MD5</b> allows longer passwords, thus provides more security, but some
network protocols don't support this, and you may have problems with NIS.
</p>");

      // Help text for password expert dialog 4/5
      help_text = help_text + _("<p>
<b>Blowfish</b> is similar to MD5, but uses a different algorithm
to encrypt passwords.
</P>");
      // Help text for password expert dialog 5/5
      help_text = help_text + _("<p>
As a general rule of thumb, use DES if you are unsure.
</p>");

      UI::OpenDialog(
		     `VBox(
				// Label
			   `Heading( _("Password Expert Options") ),
			   `VSpacing( 0.7 ),
			   `HBox(
				 `HSpacing( 2 ),
				 `RadioButtonGroup(
							// frame
						   `Frame( _("Password Encryption"),
							   `VBox(
								 `VSpacing( 0.5 ),

								 // Radio buttons for password encryption: DES-crypt
								 `Left(`RadioButton(`id(`des), _("&DES (Linux default)"),
										    encryptionMethod == "des" ) ),

								 // Radio buttons for password encryption: MD5-crypt
								 `Left(`RadioButton(`id(`md5), _("&MD5"),
										    encryptionMethod == "md5" ) ),
								 // Radio buttons for password encryption: blowfish-crypt
                                                                 `Left(`RadioButton(`id(`blowfish), _("&Blowfish"),
                                                                                    encryptionMethod == "blowfish" ) )
								 )
							   )
						   ),
				 `HSpacing( 2 )
				 ),
			   `VSpacing( 0.5 ),
			   `HBox(
				 `HStretch(),
				 `HWeight( 1, `PushButton(`id(`ok), `opt(`default), UI::OKButtonLabel() ) ),
				 `HStretch(),
				 `HWeight( 1, `PushButton(`id(`cancel), UI::CancelButtonLabel() ) ),
				 `HStretch(),
				 `HWeight( 1, `PushButton(`id(`help), UI::HelpButtonLabel() ) ),
				 `HStretch()
				 )
			   )
		     );

      symbol button = nil;

      do
      {
	  button = UI::UserInput();

	  if ( button == `help )
	  {
	      Wizard::ShowHelp( help_text );
	  }
	  else if ( button == `ok )
	  {
	      if      ( UI::QueryWidget( `id(`des), `Value ) )	encryptionMethod = "des";
	      else if ( UI::QueryWidget( `id(`md5), `Value ) )	encryptionMethod = "md5";
	      else if ( UI::QueryWidget( `id(`blowfish), `Value ) ) encryptionMethod = "blowfish";

	      y2milestone( "Password expert options: Changing encryption method to %1", encryptionMethod );

          Users::encryptionMethod = encryptionMethod;
	  }
      } while ( button != `ok && button != `cancel );


      UI::CloseDialog();
  }; // expert_dialog()


  string rpassword = Users::rootPassword;
  boolean this_is_for_real = ! Mode::test;

  Progress::off();
  Security::Read();
  Progress::on();

  string encryptionMethod = Security::Settings["PASSWD_ENCRYPTION"]:"des";

  // Title for root-password dialogue
  string title = _("Password for \"root\", the system administrator");

  term contents =
      `VBox(
        `VStretch(),
        `HSquash(
            `VBox(
               // advise user to remember his new password
               `Label(_("Do not forget what you enter here.")),
               `VSpacing(1),

               `Left(`Password(`id(`pw1),
                    // Label: get password for user root
                    // Please use newline if label is longer than 40 characters
                    _("&Enter a password for the root user:"), "")),
               `VSpacing(1),

               `Left(`Password(`id(`pw2),
                    // Label: get same password again for verification
                    // Please use newline if label is longer than 40 characters
                    _("Reenter the password for &verification:"), ""))
               )
             ),
        `VSpacing(3),
        // push button
        `PushButton(`id(`expert), `opt(`key_F7), _("E&xpert Options...") ),
        `VStretch()
        );

  // help text ( explain what the user "root" is and does ) 1/5
  string helptext = UI(_("<p>
Unlike normal users of the system, who, for instance, write texts, create
graphics, or browse the Internet, the user \"root\" exists on
every system and is called into action whenever
administrative tasks need to be performed. Log in as root
when you need to be the system administrator and only then.
</p>
"));

  // help text, continued 2/5
  helptext = helptext + UI(_("<p>
Because the root user is equipped with extensive permissions, the password
for \"root\" should be chosen carefully. A combination of letters and numbers
is recommended. To ensure that the password was entered correctly,
reenter it in a second field.
</p>
"));

  // help text, continued 3/5
  helptext = helptext + UI(_("<p>
All the rules for user passwords apply to the \"root\" password:
Distinguish between uppercase and lowercase. A password should have at
least 5 characters and, as a rule, not contain any special characters
(e.g., accented letters or umlauts).
</p>
"));

  // help text, continued 4/5
  helptext = helptext + _("<p>
Valid password characters are letters, digits, blanks, and
<tt>#*,.;:._-+!</tt><tt>$%&/|?{[()]}=</tt>.
</p>");

  // help text, continued 5/5
  helptext = helptext + UI(_("<p>
Do not forget this \"root\" password!
</p>"));

// Wizard::CreateDialog(); // just a hack, only for testing

 Wizard::SetContents(title, contents, helptext, Args(0), Args(1));
// Wizard::SetContents(title, contents, helptext, true, true);

  if ("" == UI::QueryWidget(`id(`pw1), `Value))
    UI::SetFocus (`id (`pw1));
  else if ("" == UI::QueryWidget(`id(`pw2), `Value))
    UI::SetFocus (`id (`pw2));

  any ret = nil;

  repeat
  {
      if ( ret != `expert )
      {
        // Clear password fields on every round
          UI::ChangeWidget(`id(`pw1), `Value, "");
          UI::ChangeWidget(`id(`pw2), `Value, "");
          UI::SetFocus( `id(`pw1) );
      }

      ret = Wizard::UserInput();

      if ( ret == `abort && CallFunction(`inst_confirm_abort(`incomplete) ) )
          return `abort;

      if (ret == `cancel)
          break;

      if (ret == `expert)
      {
          expert_dialog();

          string pw1 = UI::QueryWidget(`id(`pw1), `Value);
          UI::SetFocus( pw1 == "" ? `id(`pw1) : `id(`next) );
      }
      else if (ret != `back)
      {
          string pw1 = UI::QueryWidget(`id(`pw1), `Value);
          string pw2 = UI::QueryWidget(`id(`pw2), `Value);

      if (this_is_for_real && pw1 != pw2 )
      {
         // report misspellings of the password
         UI::MessagePopup(_("The first and the second version\nof the password don't match!\nPlease try again."));
         rpassword = "";
         // Invalidate any old password
         Users::rootPassword = rpassword;
         continue;
      }

      // Use the old password (if any) if no passwords were entered.
      // only check pw1 here, it is identical with pw2 (as checked before).

      if ( this_is_for_real && ( (pw1 != "") || (rpassword == "") ) )
      {
         if (pw1 == "")
         {
            // report if user forgot to enter a password
            UI::MessagePopup(_("You didn't enter a password.
Please try again."));
            rpassword = "";
            // Invalidate any old password
            Users::rootPassword = rpassword;
            continue;
         }

         if (size (pw1) < 5)
         {
            // explain how a password has to be formed
            UI::MessagePopup(_("The password must have at least 5 characters.
Try again.
"));
            rpassword = "";
            // Invalidate any old password
            Users::rootPassword = rpassword;

            if ( ret2 != nil )
            {
               // There is a check whether the information from the UI is
               // correct and complete
               // The root password may contain only certain characters
               UI::MessagePopup(_("The password may only contain the following characters:\n 0..9, a..z, A..Z, and any of \"#* ,.;:._-+!$%&/|\?{[()]}\".\nPlease try again."));
               rpassword = "";
               // Invalidate any old password
               Users::rootPassword = rpassword;
               continue;
            }
         }

        if (encryptionMethod != Security::Settings["PASSWD_ENCRYPTION"]:"des")
        {
            Security::modified = true;
            Security::Settings["PASSWD_ENCRYPTION"] = encryptionMethod;
            Progress::off();
            Security::Write();
            Progress::on();
        }

         y2milestone( "encrypting with %1", Users::encryptionMethod );

         Users::removeOldConf();
         Users::cryptRootPassword(pw1);
         if ( this_is_for_real && ! Users::SetRootPassword())
         {
             // Error msg
             Report::Error(_("The root password could not be set.
You will not be able to log in.\n"));
         }
      }
      }
  } until ( ret == `next || ret == `back || ret == `cancel );

  return ret;
}
