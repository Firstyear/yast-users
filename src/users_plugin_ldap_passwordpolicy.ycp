/**
 * File:
 *	include/users/users_plugin_ldap_passwordpolicy.ycp
 *
 * Package:
 *	Configuration of Users
 *
 * Summary:
 *	This is GUI part of UsersPluginLDAPPasswordPolicy
 *	- plugin for editing LDAP user password policy (see feature 301179)
 *
 * Authors:
 *	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */


{
    textdomain "users";

    import "Label";
    import "Report";
    import "Users";
    import "UsersPluginLDAPPasswordPolicy"; // plugin module
    import "Wizard";

    any ret = nil;
    string func			= "";
    map<string,any> config	= $[];
    map<string,any> data	= $[];

    /* Check arguments */
    if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
	func = (string) WFM::Args(0);
	if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	    config = (map<string,any>)WFM::Args(1);
	if(size(WFM::Args()) > 2 && is(WFM::Args(2), map))
	    data = (map<string,any>)WFM::Args(2);
    }
    y2milestone("----------------------------------------");
    y2milestone("users plugin started: LDAPPasswordPolicy");

    y2debug ("func=%1", func);
    y2debug ("config=%1", config);
    y2debug ("data=%1", data);

    if (func == "Summary") {
	ret = UsersPluginLDAPPasswordPolicy::Summary (config, $[]);
    }
    else if (func == "Name") {
	ret = UsersPluginLDAPPasswordPolicy::Name (config, $[]);
    }
    else if (func == "Dialog") {
	// define the dialog for this plugin and return it's contents

	string caption	= UsersPluginLDAPPasswordPolicy::Name (config, $[]);
	map<string, any> tmp_data	= $[];

	// helptext
	string help_text = _("help text for LDAPPasswordPolicy plugin FIXME");

	boolean pwdreset		= data["pwdreset"]:"0" == "1";
	string pwdpolicysubentry	= data["pwdpolicysubentry"]:"";

	term contents = `HBox (
	    `HSpacing (3),
            `VBox (
		`HBox (
		    // text entry label
		    `TextEntry (`id ("pwdpolicysubentry"),
			_("DN of &Password Policy object"), pwdpolicysubentry),
		    `VBox (
			`Label (""),
			`PushButton (`id (`browse), Label::BrowseButton ())
		    )
		),
                `Left (
		    `CheckBox (`id ("pwdreset"), _("&Reset Password"), pwdreset)
		)
	    ),
            `HSpacing (3)
	);

	Wizard::CreateDialog ();
        Wizard::SetDesktopIcon("users");

	// dialog caption
	Wizard::SetContentsButtons(_("Password Policy Settings"),
	    contents, help_text, Label::CancelButton(), Label::AcceptButton());

	Wizard::HideAbortButton ();

	ret = `next;
	repeat
	{
	    ret = UI::UserInput();
	    if (ret == `browse)
	    {
//		Popup::Message ("not implemented");
		continue;
	    }
	    if (ret == `next)
	    {
		string new_pwdpolicysubentry = (string)
		    UI::QueryWidget (`id ("pwdpolicysubentry"), `Value);
		if (new_pwdpolicysubentry != pwdpolicysubentry)
		    tmp_data["pwdpolicysubentry"]	= new_pwdpolicysubentry;

		boolean new_pwdreset	= (boolean) UI::QueryWidget (`id ("pwdreset"), `Value);
		if (new_pwdreset != pwdreset)
		    tmp_data["pwdreset"]	= new_pwdreset;

		if (tmp_data == $[])
		    break;

		string err = UsersPluginLDAPPasswordPolicy::Check (config, tmp_data);

		if (err != "")
		{
		    Report::Error (err);
		    ret = `notnext;
		    continue;
		}

		// if this plugin wasn't in default set, we must save its name
		if (!contains (data["plugins"]:[], "UsersPluginLDAPPasswordPolicy"))
		{
		    tmp_data["plugins"] = add (tmp_data["plugins"]:[],
			"UsersPluginLDAPPasswordPolicy");
		}
		if (data["what"]:"" == "edit_user")
		{
		    Users::EditUser (tmp_data);
		}
		else if (data["what"]:"" == "add_user")
		{
		    Users::AddUser (tmp_data);
		}
	    }
	} until (is(ret,symbol) &&
	    contains ([`next, `abort, `back, `cancel], (symbol) ret));

	Wizard::CloseDialog ();
    }
    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	ret = false;
    }

    y2debug ("ret=%1", ret);
    y2milestone("users plugin finished");
    y2milestone("----------------------------------------");

    return ret;
}
