/**
 * File:
 *   users_auto.ycp
 *
 * Package:
 *   Configuration of Users
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */


{
    textdomain "users";
    import "Mode";
    Mode::config = true;
    import "Users";
    import "Wizard";

    include "users/wizards.ycp";
    include "wizard/sequencer.ycp";

    any ret = nil;
    string func = "";
    list param = $[];
    /* Check arguments */
    if(size(Args()) > 0 && is(Args(0), string)) {
	func = WFM::Args(0);
	if(size(Args()) > 1 && is(Args(1), map))
	    param = WFM::Args(1);
    }
    y2debug("func=%1", func);
    y2debug("param=%1", param);


    // settings form /etc/default/useradd:
    // can be set the new ones here:
    map useradd_defaults  = $[
        "group": "100",
        "home": "/local_home",
        "inactive": "-1",
        "expire": "",
        "shell": "/bin/bash",
        "skel": "/etc/skel"
    ];
    // and passed to Import, or give empty map to Import and defaults
    // will be read from the system


    // Q: as parameter for Import, there should be always only local
    // users/groups, or optionaly the system ones?

    // examples of input structure:
    /*
    map users = $[
     `local: $[
        501:$["fullname":"A", "gid":100, "grouplist":"somegr", "groupname":"users", "home":"/local/ab", "org_home":"/local/ab", "password":"x", "shadow":$["expire":"", "flag":"", "inact":"", "last_change":"12011", "max":"99999", "min":"0", "password":"rcFmrt.5wOQ4E", "warn":"7"], "shell":"/bin/bash", "uid":501, "username":"ab"]]
    ];

    map shadow = $[
     `local: $[
        "ab":$["expire":"", "flag":"", "inact":"", "last_change":"12011", "max":"99999", "min":"0", "password":"rcFmrt.5wOQ4E", "warn":"7"]]
    ];

    map groups = $[
     `local: $[
        501:$["gid":501, "groupname":"somegr", "more_users":"", "password":"x", "userlist":"ab"]
        ]];

    map gshadow = $[
     `local: $[
        "somegr":$["disposer":"root", "password":"*", "userlist":"ab"]]];

    // settings = [ users, groups, shadow, gshadow, useradd_defaults ];
    */

    map users = $[
     `local: $[
        501: $[ "username":"my_user", "uid":501, "gid":500, "password":"pass" ]
     ]];

    map shadow = $[
     `local: $[
        "my_user":$["password":"pass"]
     ]];

    map groups = $[
     `local: $[
        500: $[ "groupname":"users", "gid":500, "more_users": "my_user" ]
     ]];

    map gshadow = $[
     `local: $[
        "users":$["disposer":"root", "password":"*"]
     ]];


    // param = [ users, groups, shadow, gshadow, $[] ];

    /* create a  summary*/
    if (func == "Summary") {
	Users::Import(param);
	ret =  Users::Summary();
    }
    else if (func == "Reset") {
	Users::Import([]);
	ret = [];
    }
    else if (func == "Change") {
	Users::Import(param);
	string start_dialog = "users"; //look to users.ycp for possible values
	Wizard::CreateDialog();
	ret = AutoSequence(start_dialog);
	Wizard::CloseDialog();
//list ex = Users::Export(); // for debug...
//y2warning ("local users: %1", ex[0,`local]:$[]);
    }
    else if (func == "Result") {
	ret = Users::Export();
    }
    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	ret = false;
    }

    y2debug("ret=%1", ret);
    y2milestone("users auto finished");
    y2milestone("----------------------------------------");

    return ret;

}
