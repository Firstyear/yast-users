/**
 * File:
 *   users_auto.ycp
 *
 * Package:
 *   Configuration of Users
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */


{
    textdomain "users";
    
    import "Mode";
    Mode::config = true;
    import "Users";
    import "Wizard";

    include "users/wizards.ycp";
    include "wizard/sequencer.ycp";

    string func = WFM::Args(0);
    list param = WFM::Args(1);


    
    // settings form /etc/default/useradd:
    // can be set the new ones here:
    map useradd_defaults  = $[
        "group": "100",
        "home": "/local_home",
        "inactive": "-1",
        "expire": "",
        "shell": "/bin/bash",
        "skel": "/etc/skel"
    ];
    // and passed to Import, or give empty map to Import and defaults
    // will be read from the system


    // Q: as parameter for Import, there should be always only local
    // users/groups, or optionaly the system ones?

    // examples of input structure:
    map users = $[
     `local: $[
        501:$["fullname":"A", "gid":100, "grouplist":"somegr", "groupname":"users", "home":"/local/ab", "org_home":"/local/ab", "password":"x", "shadow":$["expire":"", "flag":"", "inact":"", "last_change":"12011", "max":"99999", "min":"0", "password":"rcFmrt.5wOQ4E", "warn":"7"], "shell":"/bin/bash", "uid":501, "username":"ab"]]
    ];

    map shadow = $[
     `local: $[
        "ab":$["expire":"", "flag":"", "inact":"", "last_change":"12011", "max":"99999", "min":"0", "password":"rcFmrt.5wOQ4E", "warn":"7"]]
    ];

    map groups = $[
     `local: $[
        501:$["gid":501, "groupname":"somegr", "more_users":"", "password":"x", "userlist":"ab"]
        ]];

    map gshadow = $[
     `local: $[
        "somegr":$["disposer":"root", "password":"*", "userlist":"ab"]]];

    // settings = [ users, groups, shadow, gshadow, useradd_defaults ];
    // settings = [ $[], $[], $[], $[], $[] ];

 

    /* create a  summary*/
    if (func == "Summary") {
	Users::Import(param);
	return ( Users::Summary());
    }
    else if (func == "Reset") {
	Users::Import([]);	
	return ([]);
    }	
    else if (func == "Change") {
	Users::Import(param);	
	string start_dialog = "users"; //look to users.ycp for possible values
	Wizard::CreateDialog();
	any res = AutoSequence(start_dialog);
	Wizard::CloseDialog();
	return res;
    }
    else if (func == "Result") {
	return(Users::Export());
    }
    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	return false;
    }


}
