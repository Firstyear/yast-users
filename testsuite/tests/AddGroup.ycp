/**
 * File:
 *  AddGroup.ycp
 *
 * Module:
 *  Users configurator
 *
 * Summary:
 *  Saving group tests.
 *
 * Authors:
 *  Jiri Suchomel <jsuchome@suse.cz>
 *
 */

{
    // testedfiles: Users.pm

    include "testsuite.ycp";
    import "Users";
    import "UsersCache";
    import "Mode";
    import "Directory";
    import "Progress";
    import "Report";

    map READ = $[
	"passwd": $[
	    "local": $[
		"users": $[
		    500: $[
			"uid"	: "hh",
			"gecos"	: "HaHa",
			"gidnumber"	: 100,
			"uidnumber"	: 500
		    ],
		    "by_name": $[
			"hh":	500,
		    ],
		    "last_uid": 500,
		    "homes":	$[
			"/home/hh":	1,
		    ],
		    "usernames": $[
			"hh":		1,
		    ],
		    "uids": $[
			500:		1,
		    ]
		],
		"shadow": $[
		],
		"groups": $[
		    100: $[
			"cn"	:	"users",
			"gidNumber":	100,
			"type"	:	"local"
		    ],
		    "by_name": $[
			"users":	100,
		    ],
		    "gids": $[
			100:		1,
		    ],
		    "groupnames": $[
			"users":	1,
		    ]
		],
	    ],
	    "system": $[
		"users": $[
		    "by_name": $[
		    ],
		    "last_uid": 0,
		    "homes":	$[],
		    "usernames": $[],
		    "uids": $[],
		],
		"shadow": $[
		],
		"groups": $[
		    0: $[
			"cn":	"root",
			"gidNumber":	0,
			"type"	:	"system"
		    ],
		    "by_name": $[
			"root"	: 0
		    ],
		    "gids": $[
			0	: 1
		    ],
		    "groupnames": $[
			"root"	: 1
		    ]
		],
	    ],
	],
	"etc" : $[
	    "fstab": [],
	    "cryptotab": [],
	    "default": $[
		"useradd": $[
		    "home":	"/home",
		    "groups":	"audio,video",
		    "group":	100
		]
	    ],
	],
    ];

    map WRITE = $[];
    map EXEC = $[
	"passwd" : $[
	    "init"	: true
	],
	"target" : $[
	    "bash"	: 0,
	],
    ];

    DUMP ("==========================================================");

    Mode::test = true;

    TEST (``(Users::Read ()), [READ, WRITE, EXEC], 0);

    DUMP ( sformat ("local user names:\n %1", UsersCache::GetUsernames ("local")));
    DUMP ( sformat ("local group names:\n %1", UsersCache::GetGroupnames ("local")));
    DUMP (sformat ("---- current group:\n %1", Users::GetCurrentGroup ()));

    TEST (``(Users::AddGroup ($[])), [READ, WRITE, EXEC], 0);

    DUMP (sformat ("---- current group (empty add, to get default values):\n %1", Users::GetCurrentGroup ()));

    map <string,any> group = $[
	"gidnumber"	: 555,
	"cn"		: "testgrp",
	"userlist"	: $[ "hh" : 1 ],
	"password"	:"x",
	"type"		: "local",
	"what"		: "add_group"
    ];

    TEST (``(Users::AddGroup (group)), [READ, WRITE, EXEC], 0);

    DUMP (sformat ("---- current group (after rich add):\n %1", Users::GetCurrentGroup ()));

    string error = (string) TEST(``(Users::CheckGroup ($[])), [READ, WRITE, EXEC], 0);

    DUMP (sformat ("---- check group after add:\n %1", error));

    Users::SelectUserByName ("hh");

    DUMP (sformat ("---- user 'hh':\n %1", Users::GetCurrentUser ()));

    TEST(``(Users::CommitGroup ()), [READ, WRITE, EXEC], 0);

    Users::SelectUserByName ("hh");

    DUMP (sformat ("---- user 'hh':\n %1", Users::GetCurrentUser ()));

    DUMP ("==========================================================");

    DUMP ( sformat ("local group names:\n %1", UsersCache::GetGroupnames ("local")));

    DUMP ("================= gid conflict ===========================");

    TEST (``(Users::AddGroup ($[])), [READ, WRITE, EXEC], 0);
    TEST (``(Users::AddGroup ($[ "cn" : "new", "gidnumber": 0])), [], 0);

    DUMP (sformat ("---- current group after add:\n %1", Users::GetCurrentGroup ()));

    error = (string) TEST(``(Users::CheckGroup ($[])), [READ, WRITE, EXEC], 0);

    DUMP (sformat ("---- check group after add:\n %1", error));

    DUMP ("================= name conflict ==========================");

    TEST (``(Users::AddGroup ($[])), [READ, WRITE, EXEC], 0);
    TEST (``(Users::AddGroup ($[ "cn" : "testgrp"])), [], 0);

    DUMP (sformat ("---- current group after add):\n %1", Users::GetCurrentGroup ()));

    error = (string) TEST(``(Users::CheckGroup ($[])), [READ, WRITE, EXEC], 0);

    DUMP (sformat ("---- check group after add:\n %1", error));

    DUMP ("================= name too short =========================");

    TEST (``(Users::AddGroup ($[])), [READ, WRITE, EXEC], 0);
    TEST (``(Users::AddGroup ($[ "cn" : "t"])), [], 0);

    DUMP (sformat ("---- current group after add:\n %1", Users::GetCurrentGroup ()));

    error = (string) TEST(``(Users::CheckGroup ($[])), [READ, WRITE, EXEC], 0);

    DUMP (sformat ("---- check group after add:\n %1", error));


}
