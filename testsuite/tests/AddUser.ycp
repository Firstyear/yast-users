/**
 * File:
 *  AddGroup.ycp
 *
 * Module:
 *  Users configurator
 *
 * Summary:
 *  Saving group tests.
 *
 * Authors:
 *  Jiri Suchomel <jsuchome@suse.cz>
 *
 */

{
    // testedfiles: Users.pm UsersLDAP.pm UsersCache.pm

    import "Testsuite";
    import "Users";
    import "UsersCache";
    import "UsersLDAP";
    import "Mode";
    import "Progress";
    import "Report";

    map READ = $[
	"passwd": $[
	    "local": $[
		"users": $[
		    "hh": $[
			"uid"		: "hh",
			"uidnumber"	: 500
		    ],
		    "by_uidnumber": $[
			500		: $[ "hh" : 1 ],
		    ],
		    "last_uid": 500,
		    "homes":	$[
			"/home/hh":	"1",
		    ],
		    "usernames": $[
			"hh":		"1",
		    ],
		    "uids": $[
			"500":		"1",
		    ]
		],
		"shadow": $[
		],
		"groups": $[
		    "users": $[
			"cn"	:	"users",
			"gidnumber":	"100",
			"type"	:	"local"
		    ],
		    "by_gidnumber": $[
			100		: $[ "users" : 1 ],
		    ],
		    "gids": $[
			"100":		"1",
		    ],
		    "groupnames": $[
			"users":	"1",
		    ]
		],
	    ],
	    "system": $[
		"users": $[
		    "root":	$[
			"uid"		: "root",
			"uidnumber"	: "0"
		    ],
		    "by_uidnumber": $[
			0		: $[ "root" : 1]
		    ],
		    "last_uid": 0,
		    "homes":	$[
		    ],
		    "usernames": $[
			"root"		: "1",
		    ],
		    "uids": $[
			"0"		: "1"
		    ],
		],
		"shadow": $[
		],
		"groups": $[
		    "root"	: $[
			"cn":	"root",
			"gidnumber":	"0",
			"type"	:	"system"
		    ],
		    "by_gidnumber": $[
			0	: $[ "root" : 1 ]
		    ],
		    "gids": $[
			"0"	: "1"
		    ],
		    "groupnames": $[
			"root"	: "1"
		    ]
		],
	    ],
	],
	"etc" : $[
	    "fstab": [],
	    "cryptotab": [],
	    "default": $[
		"useradd": $[
		    "home":	"/home",
		    "groups":	"audio,video",
		    "group":	100
		]
	    ],
	],
	"target": $[
	    "stat"	: $[],
	    "size"	: -1,
	    "tmpdir"	: "/tmp/YaST"
	],
	"product": $[
		"features": $[
		    "USE_DESKTOP_SCHEDULER"	: "no",
		    "IO_SCHEDULER"		: "",
		    "ENABLE_AUTOLOGIN"		: "false",
		    "UI_MODE"			: "simple",
		    "EVMS_CONFIG"		: "no",
		    "INCOMPLETE_TRANSLATION_TRESHOLD"	: "99",
		]
	],
    ];
    map WRITE = $[];
    map EXEC = $[
	"passwd" : $[
	    "init"	: true
	],
	"target" : $[
	    "bash"		: 0,
	    "bash_output"	: $[]
	],
    ];

    Testsuite::Dump ("==========================================================");

    Mode::SetTest ("test");

    Testsuite::Test (``(Users::Read ()), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current user:\n %1", Users::GetCurrentUser ()));

    Testsuite::Test (``(Users::AddUser ($[])), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current user (empty add):\n %1", Users::GetCurrentUser ()));
    map<string,any> user = $[
	"uidnumber"	: 501,
	"uid"		:"aaa",
	"gidnumber"	: 100,
	"groupname"	: "users",
	"grouplist"	: $[ "audio" : 1 ],
	"homedirectory"	:"/local/home/aaa",
	"userpassword"	:"qqqqq",
	"type"		:"local",
    ];

    Testsuite::Test (``(Users::AddUser (user)), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current user (after rich add):\n %1", Users::GetCurrentUser ()));

    EXEC ["target", "bash_output", "stdout"] = "aaa";

    string error = (string) Testsuite::Test(``(Users::CheckUser ($[])), [READ,WRITE,EXEC], 0);

    Users::SelectGroup (100);
    Testsuite::Dump (sformat ("---- current group (before user commit):\n %1",
	Users::GetCurrentGroup ()));

    Testsuite::Dump (sformat ("---- check user after add:\n %1", error));

    Testsuite::Dump ("---- commit user:");

    Testsuite::Test (``(Users::CommitUser ()), [READ, WRITE, EXEC], 0);

    Users::SelectGroup (100);
    Testsuite::Dump (sformat ("---- current group (afer user commit):\n %1",
	Users::GetCurrentGroup ()));

    Testsuite::Dump ("=================== no password ==========================");

    Testsuite::Test (``(Users::AddUser ($[])), [READ, WRITE, EXEC], 0);
    Testsuite::Test (``(Users::AddUser ($[ "uid": "hhh"])), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current user (minimal add, used default values):\n %1", Users::GetCurrentUser ()));

    EXEC ["target", "bash_output", "stdout"] = "hhh";

    error = (string) Testsuite::Test(``(Users::CheckUser ($[])), [READ,WRITE,EXEC], 0);

    Testsuite::Dump (sformat ("---- check user after add:\n %1", error));

    Testsuite::Dump ("==================== username conflict ========================");

    Testsuite::Test (``(Users::AddUser ($[])), [READ, WRITE, EXEC], 0);
    Testsuite::Test (``(Users::AddUser ($[ "uid": "root", "userpassword": "qqqqq"])),
	[READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current user (just added):\n %1", Users::GetCurrentUser ()));
    EXEC ["target", "bash_output", "stdout"] = "root";

    error = (string) Testsuite::Test(``(Users::CheckUser ($[])), [READ,WRITE,EXEC], 0);

    Testsuite::Dump (sformat ("---- check user after add:\n %1", error));

    Testsuite::Dump ("==================== uidnumber problems ===================");

    Testsuite::Test (``(Users::AddUser ($[])), [READ, WRITE, EXEC], 0);
    Testsuite::Test (``(Users::AddUser ($[
	"uid"		: "rrr",
	"uidnumber"	: 5,
	"type"		: "local",
	"userpassword"	: "qqqqq"
	])),
	[READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current user (just added):\n %1", Users::GetCurrentUser ()));
    EXEC ["target", "bash_output", "stdout"] = "rrr";

    error = (string) Testsuite::Test(``(Users::CheckUser ($[])), [READ,WRITE,EXEC], 0);

    Testsuite::Dump (sformat ("---- check user after add:\n %1", error));

    Testsuite::Dump ("==================== uid content problems ===================");

    Testsuite::Test (``(UsersLDAP::SetUserBase ("dc=suse,dc=cz")), [], 0);
    Testsuite::Test (``(Users::AddUser ($[])), [READ, WRITE, EXEC], 0);
    Testsuite::Test (``(Users::AddUser ($[
	"uid"		: "iii$",
	"type"		: "local",
	"userpassword"	: "qqqqq"
	])),
	[READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current user (just added):\n %1", Users::GetCurrentUser ()));
    EXEC ["target", "bash_output", "stdout"] = "";

    error = (string) Testsuite::Test(``(Users::CheckUser ($[])), [READ,WRITE,EXEC], 0);

    Testsuite::Dump (sformat ("---- check user after add:\n %1", error));

    Testsuite::Dump ("==================== uid for LDAP may contain '$' ==============");

    Testsuite::Test (``(Users::AddUser ($[])), [READ, WRITE, EXEC], 0);
    Testsuite::Test (``(Users::AddUser ($[
	"uid"		: "iii$",
	"type"		: "ldap",
	"homedirectory"	: "/home/ldap/iii",
	"userpassword"	: "qqqqq"
	])),
	[READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current user (just added):\n %1", Users::GetCurrentUser ()));
    EXEC ["target", "bash_output", "stdout"] = "iii";

    error = (string) Testsuite::Test(``(Users::CheckUser ($[])), [READ,WRITE,EXEC], 0);

    Testsuite::Dump (sformat ("---- check user after add:\n %1", error));

    Testsuite::Dump ("==========================================================");

    Testsuite::Dump ("============== duplicated UID number =====================");

    Testsuite::Test (``(Users::AddUser ($[])), [READ, WRITE, EXEC], 0);
    Testsuite::Test (``(Users::AddUser ($[ "uid": "admin", "uidnumber": 0,
	"userpassword": "qqqqq", "type" : "system"])), [READ, WRITE, EXEC], 0);

    EXEC ["target", "bash_output", "stdout"] = "admin";

    error = (string) Testsuite::Test(``(Users::CheckUser ($[])), [READ,WRITE,EXEC], 0);
}
